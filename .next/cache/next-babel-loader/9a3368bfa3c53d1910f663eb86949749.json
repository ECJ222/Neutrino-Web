{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport _values from 'lodash-es/values';\nimport { OPEN_MODAL, CLOSE_MODAL } from '../actions/modal';\nvar initialState = {\n  opened: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case OPEN_MODAL:\n      return {\n        opened: _objectSpread({}, state.opened, _defineProperty({}, action.id, {\n          id: action.id,\n          modal: action.modal,\n          props: _objectSpread({}, _get(state, \"opened.\".concat(action.id, \".props\")), {}, action.props)\n        }))\n      };\n\n    case CLOSE_MODAL:\n      if (action.id) {\n        var opened = state.opened;\n        delete opened[action.id];\n        return {\n          opened: opened\n        };\n      } else {\n        return {\n          opened: {}\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport var getOpened = function getOpened(state) {\n  return _values(state.modal.opened);\n};","map":null,"metadata":{},"sourceType":"module"}