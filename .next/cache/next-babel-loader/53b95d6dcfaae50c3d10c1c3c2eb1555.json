{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _isFunction from 'lodash-es/isFunction';\nimport _isObject from 'lodash-es/isObject';\nimport _upperFirst from 'lodash-es/upperFirst';\nimport _merge from 'lodash-es/merge';\nimport { http } from 'components';\nimport { setMeta } from './fields';\nimport { goToPage } from './navigation';\nexport var AUTH_INIT_USER = 'AUTH_INIT_USER';\nexport var AUTH_SET_DATA = 'AUTH_SET_DATA';\nexport var AUTH_ADD_SOCIAL = 'AUTH_ADD_SOCIAL';\nvar lastInitAction = null;\nexport var init = function init(initAction) {\n  return function (dispatch, getState) {\n    lastInitAction = initAction;\n    return initAction(getState()).then(function (data) {\n      // Configure components\n      if (_isObject(data.config)) {\n        var components = require('components');\n\n        _Object$keys(data.config).map(function (name) {\n          if (components[name]) {\n            _Object$keys(data.config[name]).map(function (key) {\n              var value = data.config[name][key];\n\n              var setter = 'set' + _upperFirst(key);\n\n              if (_isFunction(components[name][setter])) {\n                components[name][setter](value);\n              } else if (_isObject(components[name][key]) && _isObject(value)) {\n                _merge(components[name][key], value);\n              } else {\n                components[name][key] = value;\n              }\n            });\n          }\n        });\n      }\n\n      return dispatch([// User auth\n      setUser(data.user), // Meta models & enums\n      data.meta && setMeta(data.meta), // User auth\n      setData(data)].filter(Boolean));\n    });\n  };\n};\nexport var login = function login(token) {\n  var redirectPageId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'root';\n  return function (dispatch) {\n    http.setAccessToken(token);\n    return dispatch(init(lastInitAction)).then(function () {\n      return dispatch(goToPage(redirectPageId));\n    });\n  };\n};\nexport var addSocial = function addSocial(social) {\n  return {\n    type: AUTH_ADD_SOCIAL,\n    social: social\n  };\n};\nexport var setUser = function setUser(user) {\n  return {\n    type: AUTH_INIT_USER,\n    user: user || null\n  };\n};\nexport var setData = function setData(data) {\n  return {\n    type: AUTH_SET_DATA,\n    data: data\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    http.setAccessToken(null);\n    return dispatch([setUser(null), goToPage('root')]);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}