{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { round as _round, get as _get } from 'lodash';\nimport CurrencyEnum from '../enums/CurrencyEnum';\nimport { getAddressDefaultBalance, getAssetBalanceInfo } from './helpers';\n\nvar BalanceController =\n/*#__PURE__*/\nfunction () {\n  function BalanceController(_ref) {\n    var dalRef = _ref.dalRef;\n\n    _classCallCheck(this, BalanceController);\n\n    _defineProperty(this, \"dal\", void 0);\n\n    _defineProperty(this, \"_timer\", void 0);\n\n    _defineProperty(this, \"_address\", void 0);\n\n    _defineProperty(this, \"_balances\", void 0);\n\n    _defineProperty(this, \"_lastTransactionId\", void 0);\n\n    _defineProperty(this, \"onUpdate\", void 0);\n\n    this.dal = dalRef;\n    this.onUpdate = null;\n    this._timer = null;\n    this._address = null;\n    this._balances = null;\n    this._lastTransactionId = null;\n    this._next = this._next.bind(this);\n  }\n\n  _createClass(BalanceController, [{\n    key: \"getBalances\",\n    value: function getBalances() {\n      return this._balances;\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(address) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._address === address || !address)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this._address = address;\n                this._balances = null;\n                this._lastTransactionId = null; // if (!this._address) {\n                //     return;\n                // }\n\n                _context.next = 7;\n                return this._next();\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start(_x) {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._address = null;\n      this._balances = null;\n      this._lastTransactionId = null;\n\n      if (this._timer) {\n        clearTimeout(this._timer);\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function () {\n      var _next2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._refreshBalance();\n\n              case 2:\n                // @ts-ignore\n                this._timer = setTimeout(this._next, 5000);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _next() {\n        return _next2.apply(this, arguments);\n      }\n\n      return _next;\n    }()\n  }, {\n    key: \"_refreshBalance\",\n    value: function () {\n      var _refreshBalance2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var address, balanceDict, wavesBalanceRes, currency, assetId, newBalanceRes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                address = this._address;\n\n                if (!(!address || !this.dal)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                balanceDict = {};\n                _context3.next = 6;\n                return getAddressDefaultBalance({\n                  nodeUrl: this.dal.nodeUrl,\n                  address: address\n                });\n\n              case 6:\n                wavesBalanceRes = _context3.sent;\n                balanceDict[CurrencyEnum.WAVES] = _get(wavesBalanceRes.data, 'balance', null);\n                _context3.t0 = _regeneratorRuntime.keys(this.dal.assets);\n\n              case 9:\n                if ((_context3.t1 = _context3.t0()).done) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                currency = _context3.t1.value;\n\n                if (!this.dal.assets.hasOwnProperty(currency)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                assetId = this.dal.assets[currency];\n                _context3.next = 15;\n                return getAssetBalanceInfo({\n                  nodeUrl: this.dal.nodeUrl,\n                  address: address,\n                  assetId: assetId\n                });\n\n              case 15:\n                newBalanceRes = _context3.sent;\n                balanceDict[currency] = newBalanceRes.data.balance || null;\n\n              case 17:\n                _context3.next = 9;\n                break;\n\n              case 19:\n                // Normalize\n                _Object$keys(balanceDict).forEach(function (currency) {\n                  balanceDict[currency] = _round(balanceDict[currency] / CurrencyEnum.getContractPow(currency), 2);\n                });\n\n                if (address === this._address) {\n                  this._balances = balanceDict;\n\n                  if (this.onUpdate) {\n                    this.onUpdate(balanceDict);\n                  }\n                }\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _refreshBalance() {\n        return _refreshBalance2.apply(this, arguments);\n      }\n\n      return _refreshBalance;\n    }()\n  }]);\n\n  return BalanceController;\n}();\n\nexport { BalanceController as default };","map":null,"metadata":{},"sourceType":"module"}