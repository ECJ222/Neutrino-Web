{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport { http, clientStorage } from 'components';\nexport var LIST_INIT = 'LIST_INIT';\nexport var LIST_BEFORE_FETCH = 'LIST_BEFORE_FETCH';\nexport var LIST_AFTER_FETCH = 'LIST_AFTER_FETCH';\nexport var LIST_ITEM_ADD = 'LIST_ITEM_ADD';\nexport var LIST_ITEM_UPDATE = 'LIST_ITEM_UPDATE';\nexport var LIST_DESTROY = 'LIST_DESTROY';\nexport var LIST_TOGGLE_ITEM = 'LIST_TOGGLE_ITEM';\nexport var LIST_TOGGLE_ALL = 'LIST_TOGGLE_ALL';\nexport var LIST_SET_LAYOUT = 'LIST_SET_LAYOUT';\nvar STORAGE_LAYOUT_KEY_PREFIX = 'listLayout_';\nvar lazyTimers = {};\n\nvar defaultFetchHandler = function defaultFetchHandler(list) {\n  var url = list.action;\n\n  if (list.scope) {\n    url += (url.indexOf('?') !== -1 ? '&' : '?') + 'scope=' + list.scope.join(',');\n  }\n\n  return http.send(list.actionMethod, url || location.pathname, _objectSpread({}, list.query, {\n    page: list.page,\n    pageSize: list.pageSize,\n    sort: list.sort\n  })).then(function (response) {\n    return response.data;\n  });\n};\n\nexport var init = function init(listId, props) {\n  return function (dispatch) {\n    return dispatch({\n      action: props.action || props.action === '' ? props.action : null,\n      actionMethod: props.actionMethod || 'post',\n      onFetch: props.onFetch,\n      scope: props.scope,\n      page: props.defaultPage,\n      pageSize: props.defaultPageSize,\n      sort: props.defaultSort || null,\n      total: props.total || null,\n      query: props.query || null,\n      items: props.items || null,\n      loadMore: props.loadMore,\n      primaryKey: props.primaryKey,\n      layoutName: clientStorage.get(STORAGE_LAYOUT_KEY_PREFIX + listId) || props.selectedLayoutName || _get(props, 'layoutNames.0.id') || null,\n      listId: listId,\n      type: LIST_INIT\n    });\n  };\n};\nexport var fetch = function fetch(listId) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (dispatch, getState) {\n    var list = _objectSpread({}, _get(getState(), ['list', 'lists', listId]), {}, params);\n\n    if (!list.action && list.action !== '') {\n      return;\n    }\n\n    var onFetch = list.onFetch || defaultFetchHandler;\n    return dispatch([_objectSpread({}, params, {\n      listId: listId,\n      type: LIST_BEFORE_FETCH\n    }), onFetch(list).then(function (data) {\n      if (!getState().list.lists[listId]) {\n        return [];\n      }\n\n      return _objectSpread({}, data, {\n        listId: listId,\n        type: LIST_AFTER_FETCH\n      });\n    })]);\n  };\n};\nexport var lazyFetch = function lazyFetch(listId, params) {\n  return function (dispatch) {\n    if (lazyTimers[listId]) {\n      clearTimeout(lazyTimers[listId]);\n    }\n\n    lazyTimers[listId] = setTimeout(function () {\n      return dispatch(fetch(listId, params));\n    }, 200);\n  };\n};\nexport var setPage = function setPage(listId, page, loadMore) {\n  return fetch(listId, {\n    page: page,\n    loadMore: loadMore\n  });\n};\nexport var setPageSize = function setPageSize(listId, pageSize) {\n  return fetch(listId, {\n    page: 1,\n    pageSize: pageSize\n  });\n};\nexport var setSort = function setSort(listId, sort) {\n  return fetch(listId, {\n    sort: sort\n  });\n};\nexport var refresh = function refresh(listId) {\n  return fetch(listId);\n};\nexport var add = function add(listId, item) {\n  return {\n    item: item,\n    listId: listId,\n    type: LIST_ITEM_ADD\n  };\n};\nexport var update = function update(listId, item, condition) {\n  return {\n    item: item,\n    condition: condition,\n    listId: listId,\n    type: LIST_ITEM_UPDATE\n  };\n};\nexport var destroy = function destroy(listId) {\n  if (lazyTimers[listId]) {\n    clearTimeout(lazyTimers[listId]);\n  }\n\n  return {\n    listId: listId,\n    type: LIST_DESTROY\n  };\n};\nexport var toggleItem = function toggleItem(listId, itemId) {\n  return {\n    listId: listId,\n    itemId: itemId,\n    type: LIST_TOGGLE_ITEM\n  };\n};\nexport var toggleAll = function toggleAll(listId) {\n  return {\n    listId: listId,\n    type: LIST_TOGGLE_ALL\n  };\n};\nexport var setLayoutName = function setLayoutName(listId, layoutName) {\n  clientStorage.set(STORAGE_LAYOUT_KEY_PREFIX + listId, layoutName);\n  return {\n    listId: listId,\n    layoutName: layoutName,\n    type: LIST_SET_LAYOUT\n  };\n};","map":null,"metadata":{},"sourceType":"module"}