{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { round as _round, get as _get } from 'lodash';\nimport CurrencyEnum from '../enums/CurrencyEnum';\nimport { getAddressDefaultBalance, getAssetBalanceInfo } from './helpers';\n\nvar BalanceController =\n/*#__PURE__*/\nfunction () {\n  function BalanceController(_ref) {\n    var dalRef = _ref.dalRef;\n\n    _classCallCheck(this, BalanceController);\n\n    _defineProperty(this, \"dal\", void 0);\n\n    _defineProperty(this, \"_timer\", void 0);\n\n    _defineProperty(this, \"_address\", void 0);\n\n    _defineProperty(this, \"_balances\", void 0);\n\n    _defineProperty(this, \"_lastTransactionId\", void 0);\n\n    _defineProperty(this, \"onUpdate\", void 0);\n\n    this.dal = dalRef;\n    this.onUpdate = null;\n    this._timer = null;\n    this._address = null;\n    this._balances = null;\n    this._lastTransactionId = null;\n    this._next = this._next.bind(this);\n  }\n\n  _createClass(BalanceController, [{\n    key: \"getBalances\",\n    value: function getBalances() {\n      return this._balances;\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(address) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._address === address || !address)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this._address = address;\n                this._balances = null;\n                this._lastTransactionId = null; // if (!this._address) {\n                //     return;\n                // }\n\n                _context.next = 7;\n                return this._next();\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start(_x) {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._address = null;\n      this._balances = null;\n      this._lastTransactionId = null;\n\n      if (this._timer) {\n        clearTimeout(this._timer);\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function () {\n      var _next2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._refreshBalance();\n\n              case 2:\n                // @ts-ignore\n                this._timer = setTimeout(this._next, 5000);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _next() {\n        return _next2.apply(this, arguments);\n      }\n\n      return _next;\n    }()\n  }, {\n    key: \"_refreshBalance\",\n    value: function () {\n      var _refreshBalance2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var address, balanceDict, wavesBalanceRes, currency, assetId, newBalanceRes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                address = this._address;\n\n                if (!(!address || !this.dal)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                balanceDict = {};\n                _context3.next = 6;\n                return getAddressDefaultBalance({\n                  nodeUrl: this.dal.nodeUrl,\n                  address: address\n                });\n\n              case 6:\n                wavesBalanceRes = _context3.sent;\n                balanceDict[CurrencyEnum.WAVES] = _get(wavesBalanceRes.data, 'balance', null);\n                _context3.t0 = _regeneratorRuntime.keys(this.dal.assets);\n\n              case 9:\n                if ((_context3.t1 = _context3.t0()).done) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                currency = _context3.t1.value;\n\n                if (!this.dal.assets.hasOwnProperty(currency)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                assetId = this.dal.assets[currency];\n                _context3.next = 15;\n                return getAssetBalanceInfo({\n                  nodeUrl: this.dal.nodeUrl,\n                  address: address,\n                  assetId: assetId\n                });\n\n              case 15:\n                newBalanceRes = _context3.sent;\n                balanceDict[currency] = newBalanceRes.data.balance || null;\n\n              case 17:\n                _context3.next = 9;\n                break;\n\n              case 19:\n                // Normalize\n                _Object$keys(balanceDict).forEach(function (currency) {\n                  balanceDict[currency] = _round(balanceDict[currency] / CurrencyEnum.getContractPow(currency), 2);\n                });\n\n                if (address === this._address) {\n                  this._balances = balanceDict;\n\n                  if (this.onUpdate) {\n                    this.onUpdate(balanceDict);\n                  }\n                }\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _refreshBalance() {\n        return _refreshBalance2.apply(this, arguments);\n      }\n\n      return _refreshBalance;\n    }()\n  }]);\n\n  return BalanceController;\n}();\n\nexport { BalanceController as default };","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/contractControllers/BalanceController.ts"],"names":["round","_round","get","_get","CurrencyEnum","getAddressDefaultBalance","getAssetBalanceInfo","BalanceController","dalRef","dal","onUpdate","_timer","_address","_balances","_lastTransactionId","_next","bind","address","clearTimeout","_refreshBalance","setTimeout","balanceDict","nodeUrl","wavesBalanceRes","WAVES","data","assets","currency","hasOwnProperty","assetId","newBalanceRes","balance","forEach","getContractPow"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { round as _round, isEqual as _isEqual, get as _get } from 'lodash';\n\nimport CurrencyEnum from '../enums/CurrencyEnum';\nimport DalComponent from '../components/DalComponent';\n\nimport { getAddressDefaultBalance, getAssetBalanceInfo } from './helpers';\n\ninterface BalanceDictionary {\n    [key: string]: number | null;\n}\n\nexport default class BalanceController {\n    private dal: DalComponent | null;\n    private _timer: NodeJS.Timeout | null;\n    private _address: string | null;\n    private _balances: BalanceDictionary | null;\n    private _lastTransactionId: string | null;\n    onUpdate: (balances: BalanceDictionary) => Promise<void> | null;\n\n    constructor({ dalRef }: { dalRef: DalComponent }) {\n        this.dal = dalRef;\n        this.onUpdate = null;\n\n        this._timer = null;\n        this._address = null;\n        this._balances = null;\n        this._lastTransactionId = null;\n\n        this._next = this._next.bind(this);\n    }\n\n    getBalances() {\n        return this._balances;\n    }\n\n    async start(address?: string) {\n        if (this._address === address || !address) {\n            return;\n        }\n\n        this._address = address;\n        this._balances = null;\n        this._lastTransactionId = null;\n\n        // if (!this._address) {\n        //     return;\n        // }\n\n        return await this._next();\n    }\n\n    stop() {\n        this._address = null;\n        this._balances = null;\n        this._lastTransactionId = null;\n\n        if (this._timer) {\n            clearTimeout(this._timer);\n        }\n    }\n\n    async _next() {\n        /*let transactionId = null;\n        if (this._address) {\n            try {\n                const result = await this._request(`transactions/address/${this._address}/limit/1`);\n                transactionId = result && result.length > 0 ? result[0].id : null;\n            } catch (e) {\n                console.error('BalanceListener error:', e);\n            }\n        }\n\n        if (transactionId !== this._lastTransactionId) {\n            this._lastTransactionId = transactionId;\n            await this._refreshBalance();\n        }*/\n\n        await this._refreshBalance();\n\n        // @ts-ignore\n        this._timer = setTimeout(this._next, 5000);\n    }\n\n    async _refreshBalance() {\n        const { _address: address } = this;\n\n        if (!address || !this.dal) {\n            return;\n        }\n\n        const balanceDict: BalanceDictionary = {};\n\n        const wavesBalanceRes = await getAddressDefaultBalance({\n            nodeUrl: this.dal.nodeUrl,\n            address\n        });\n\n        balanceDict[CurrencyEnum.WAVES] = _get(\n            wavesBalanceRes.data,\n            'balance',\n            null\n        );\n\n        for (const currency in this.dal.assets) {\n            if (this.dal.assets.hasOwnProperty(currency)) {\n                const assetId = this.dal.assets[currency];\n                const newBalanceRes = await getAssetBalanceInfo({\n                    nodeUrl: this.dal.nodeUrl,\n                    address,\n                    assetId\n                });\n\n                balanceDict[currency] = newBalanceRes.data.balance || null;\n            }\n        }\n\n        // Normalize\n        Object.keys(balanceDict).forEach((currency) => {\n            balanceDict[currency] = _round(\n                balanceDict[currency] / CurrencyEnum.getContractPow(currency),\n                2\n            );\n        });\n\n        if (address === this._address) {\n            this._balances = balanceDict;\n\n            if (this.onUpdate) {\n                this.onUpdate(balanceDict);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}