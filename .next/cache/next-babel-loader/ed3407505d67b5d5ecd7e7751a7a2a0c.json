{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API_ADD_CONFIGS, API_REMOVE_CONFIGS, API_SET_DATA, getConfigId } from 'actions/api';\nvar initialState = {\n  configs: [],\n  data: {},\n  counters: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case API_ADD_CONFIGS:\n      var configs = [].concat(state.configs);\n\n      var counters = _objectSpread({}, state.counters);\n\n      action.configs.forEach(function (config) {\n        var id = getConfigId(config);\n\n        if (counters[id]) {\n          counters[id]++;\n        } else {\n          counters[id] = 1;\n          configs.push(config);\n        }\n      });\n      return _objectSpread({}, state, {\n        configs: configs,\n        counters: counters\n      });\n\n    case API_REMOVE_CONFIGS:\n      var configs2 = [].concat(state.configs);\n\n      var counters2 = _objectSpread({}, state.counters);\n\n      action.configs.forEach(function (config) {\n        var id = getConfigId(config);\n\n        if (counters2[id]) {\n          counters2[id]--;\n\n          if (counters2[id] <= 0) {\n            configs2 = configs2.filter(function (item) {\n              return getConfigId(item) !== id;\n            });\n          }\n        }\n      });\n      return _objectSpread({}, state, {\n        configs: configs2,\n        counters: counters2\n      });\n\n    case API_SET_DATA:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, _defineProperty({}, getConfigId(action.config), action.data))\n      });\n  }\n\n  return state;\n});","map":null,"metadata":{},"sourceType":"module"}