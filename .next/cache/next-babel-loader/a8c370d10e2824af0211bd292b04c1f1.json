{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _get from 'lodash-es/get';\nimport _isArray from 'lodash-es/isArray';\nimport { http } from 'components';\nexport var FIELDS_BEFORE_FETCH = 'FIELDS_BEFORE_FETCH';\nexport var FIELDS_AFTER_FETCH = 'FIELDS_AFTER_FETCH';\nexport var FIELDS_SET_META = 'FIELDS_SET_META';\nexport var FIELDS_ADD_SECURITY = 'FIELDS_ADD_SECURITY';\nexport var FIELDS_REMOVE_SECURITY = 'FIELDS_REMOVE_SECURITY';\nvar timer = null;\nvar queue = [];\nexport var normalizeName = function normalizeName(name) {\n  return name.replace(/\\\\/g, '.').replace(/^\\./, '');\n};\nexport var fetch = function fetch(fieldId, model, attribute) {\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return function (dispatch) {\n    model = _get(model, 'className', String(model)); // Mark loading\n\n    dispatch({\n      type: FIELDS_BEFORE_FETCH,\n      fieldId: fieldId,\n      model: model,\n      attribute: attribute\n    }); // Add to queue\n\n    queue.push({\n      fieldId: fieldId,\n      model: model,\n      attribute: attribute,\n      params: params\n    }); // Lazy send request\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(function () {\n      // Send request\n      http.post('/api/steroids/fields-fetch', {\n        fields: queue\n      }).then(function (fields) {\n        return dispatch({\n          type: FIELDS_AFTER_FETCH,\n          fields: fields\n        });\n      }); // Clean queue\n\n      queue = [];\n    }, 10);\n  };\n};\nexport var fetchMeta = function fetchMeta(names) {\n  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (dispatch, getState) {\n    if (_isArray(names)) {\n      throw new Error('This format is deprecated, use {models: ..., enums: ...} format.');\n    } // Normalize names\n\n\n    _Object$keys(names).forEach(function (key) {\n      names[key] = names[key].map(normalizeName);\n    });\n\n    var isMetaFetched = getState().fields.meta !== null;\n\n    if (isMetaFetched && !force) {\n      return;\n    } // Send request\n\n\n    return http.post('/api/steroids/meta-fetch', names).then(function (meta) {\n      return setMeta(meta);\n    });\n  };\n};\nexport var setMeta = function setMeta(meta) {\n  return {\n    type: FIELDS_SET_META,\n    meta: meta\n  };\n};\nexport var addSecurity = function addSecurity(formId, params) {\n  return {\n    type: FIELDS_ADD_SECURITY,\n    formId: formId,\n    params: params\n  };\n};\nexport var removeSecurity = function removeSecurity(formId) {\n  return {\n    type: FIELDS_REMOVE_SECURITY,\n    formId: formId\n  };\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/actions/fields.js"],"names":["_get","_isArray","http","FIELDS_BEFORE_FETCH","FIELDS_AFTER_FETCH","FIELDS_SET_META","FIELDS_ADD_SECURITY","FIELDS_REMOVE_SECURITY","timer","queue","normalizeName","name","replace","fetch","fieldId","model","attribute","params","dispatch","String","type","push","clearTimeout","setTimeout","post","fields","then","fetchMeta","names","force","getState","Error","forEach","key","map","isMetaFetched","meta","setMeta","addSecurity","formId","removeSecurity"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,SAAQC,IAAR,QAAmB,YAAnB;AAEA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AAEP,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,KAAK,GAAG,EAAZ;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAIA,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,GAApB,EAAyBA,OAAzB,CAAiC,KAAjC,EAAwC,EAAxC,CAAJ;AAAA,CAA1B;AAEP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,OAAD,EAAUC,KAAV,EAAiBC,SAAjB;AAAA,MAA4BC,MAA5B,uEAAqC,EAArC;AAAA,SAA4C,UAAAC,QAAQ,EAAI;AACzEH,IAAAA,KAAK,GAAGf,IAAI,CAACe,KAAD,EAAQ,WAAR,EAAqBI,MAAM,CAACJ,KAAD,CAA3B,CAAZ,CADyE,CAGzE;;AACAG,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEjB,mBADD;AAELW,MAAAA,OAAO,EAAPA,OAFK;AAGLC,MAAAA,KAAK,EAALA,KAHK;AAILC,MAAAA,SAAS,EAATA;AAJK,KAAD,CAAR,CAJyE,CAWzE;;AACAP,IAAAA,KAAK,CAACY,IAAN,CAAW;AAACP,MAAAA,OAAO,EAAPA,OAAD;AAAUC,MAAAA,KAAK,EAALA,KAAV;AAAiBC,MAAAA,SAAS,EAATA,SAAjB;AAA4BC,MAAAA,MAAM,EAANA;AAA5B,KAAX,EAZyE,CAczE;;AACA,QAAIT,KAAJ,EAAW;AACPc,MAAAA,YAAY,CAACd,KAAD,CAAZ;AACH;;AACDA,IAAAA,KAAK,GAAGe,UAAU,CAAC,YAAM;AACrB;AACArB,MAAAA,IAAI,CAACsB,IAAL,CAAU,4BAAV,EAAwC;AAACC,QAAAA,MAAM,EAAEhB;AAAT,OAAxC,EACKiB,IADL,CACU,UAAAD,MAAM;AAAA,eAAIP,QAAQ,CAAC;AACrBE,UAAAA,IAAI,EAAEhB,kBADe;AAErBqB,UAAAA,MAAM,EAANA;AAFqB,SAAD,CAAZ;AAAA,OADhB,EAFqB,CAQrB;;AACAhB,MAAAA,KAAK,GAAG,EAAR;AACH,KAViB,EAUf,EAVe,CAAlB;AAWH,GA7BoB;AAAA,CAAd;AA+BP,OAAO,IAAMkB,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD;AAAA,MAAQC,KAAR,uEAAgB,KAAhB;AAAA,SAA0B,UAACX,QAAD,EAAWY,QAAX,EAAwB;AACvE,QAAI7B,QAAQ,CAAC2B,KAAD,CAAZ,EAAqB;AACjB,YAAM,IAAIG,KAAJ,CAAU,kEAAV,CAAN;AACH,KAHsE,CAKvE;;;AACA,iBAAYH,KAAZ,EAAmBI,OAAnB,CAA2B,UAAAC,GAAG,EAAI;AAC9BL,MAAAA,KAAK,CAACK,GAAD,CAAL,GAAaL,KAAK,CAACK,GAAD,CAAL,CAAWC,GAAX,CAAexB,aAAf,CAAb;AACH,KAFD;;AAIA,QAAMyB,aAAa,GAAGL,QAAQ,GAAGL,MAAX,CAAkBW,IAAlB,KAA2B,IAAjD;;AACA,QAAID,aAAa,IAAI,CAACN,KAAtB,EAA6B;AACzB;AACH,KAbsE,CAevE;;;AACA,WAAO3B,IAAI,CAACsB,IAAL,CAAU,0BAAV,EAAsCI,KAAtC,EACFF,IADE,CACG,UAAAU,IAAI;AAAA,aAAIC,OAAO,CAACD,IAAD,CAAX;AAAA,KADP,CAAP;AAEH,GAlBwB;AAAA,CAAlB;AAoBP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAD,IAAI;AAAA,SAAK;AAC5BhB,IAAAA,IAAI,EAAEf,eADsB;AAE5B+B,IAAAA,IAAI,EAAJA;AAF4B,GAAL;AAAA,CAApB;AAKP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAStB,MAAT;AAAA,SAAqB;AAC5CG,IAAAA,IAAI,EAAEd,mBADsC;AAE5CiC,IAAAA,MAAM,EAANA,MAF4C;AAG5CtB,IAAAA,MAAM,EAANA;AAH4C,GAArB;AAAA,CAApB;AAMP,OAAO,IAAMuB,cAAc,GAAG,SAAjBA,cAAiB,CAACD,MAAD;AAAA,SAAa;AACvCnB,IAAAA,IAAI,EAAEb,sBADiC;AAEvCgC,IAAAA,MAAM,EAANA;AAFuC,GAAb;AAAA,CAAvB","sourcesContent":["import _get from 'lodash-es/get';\nimport _isArray from 'lodash-es/isArray';\n\nimport {http} from 'components';\n\nexport const FIELDS_BEFORE_FETCH = 'FIELDS_BEFORE_FETCH';\nexport const FIELDS_AFTER_FETCH = 'FIELDS_AFTER_FETCH';\nexport const FIELDS_SET_META = 'FIELDS_SET_META';\nexport const FIELDS_ADD_SECURITY = 'FIELDS_ADD_SECURITY';\nexport const FIELDS_REMOVE_SECURITY = 'FIELDS_REMOVE_SECURITY';\n\nlet timer = null;\nlet queue = [];\n\nexport const normalizeName = name => name.replace(/\\\\/g, '.').replace(/^\\./, '');\n\nexport const fetch = (fieldId, model, attribute, params = {}) => dispatch => {\n    model = _get(model, 'className', String(model));\n\n    // Mark loading\n    dispatch({\n        type: FIELDS_BEFORE_FETCH,\n        fieldId,\n        model,\n        attribute,\n    });\n\n    // Add to queue\n    queue.push({fieldId, model, attribute, params});\n\n    // Lazy send request\n    if (timer) {\n        clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n        // Send request\n        http.post('/api/steroids/fields-fetch', {fields: queue})\n            .then(fields => dispatch({\n                type: FIELDS_AFTER_FETCH,\n                fields,\n            }));\n\n        // Clean queue\n        queue = [];\n    }, 10);\n};\n\nexport const fetchMeta = (names, force = false) => (dispatch, getState) => {\n    if (_isArray(names)) {\n        throw new Error('This format is deprecated, use {models: ..., enums: ...} format.');\n    }\n\n    // Normalize names\n    Object.keys(names).forEach(key => {\n        names[key] = names[key].map(normalizeName);\n    });\n\n    const isMetaFetched = getState().fields.meta !== null;\n    if (isMetaFetched && !force) {\n        return;\n    }\n\n    // Send request\n    return http.post('/api/steroids/meta-fetch', names)\n        .then(meta => setMeta(meta));\n};\n\nexport const setMeta = meta => ({\n    type: FIELDS_SET_META,\n    meta,\n});\n\nexport const addSecurity = (formId, params) => ({\n    type: FIELDS_ADD_SECURITY,\n    formId,\n    params,\n});\n\nexport const removeSecurity = (formId) => ({\n    type: FIELDS_REMOVE_SECURITY,\n    formId,\n});\n"]},"metadata":{},"sourceType":"module"}