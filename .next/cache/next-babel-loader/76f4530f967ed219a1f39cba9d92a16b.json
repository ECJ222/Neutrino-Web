{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API_ADD_CONFIGS, API_REMOVE_CONFIGS, API_SET_DATA, getConfigId } from 'actions/api';\nconst initialState = {\n  configs: [],\n  data: {},\n  counters: {}\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case API_ADD_CONFIGS:\n      const configs = [].concat(state.configs);\n\n      const counters = _objectSpread({}, state.counters);\n\n      action.configs.forEach(config => {\n        const id = getConfigId(config);\n\n        if (counters[id]) {\n          counters[id]++;\n        } else {\n          counters[id] = 1;\n          configs.push(config);\n        }\n      });\n      return _objectSpread({}, state, {\n        configs,\n        counters\n      });\n\n    case API_REMOVE_CONFIGS:\n      let configs2 = [].concat(state.configs);\n\n      const counters2 = _objectSpread({}, state.counters);\n\n      action.configs.forEach(config => {\n        const id = getConfigId(config);\n\n        if (counters2[id]) {\n          counters2[id]--;\n\n          if (counters2[id] <= 0) {\n            configs2 = configs2.filter(item => getConfigId(item) !== id);\n          }\n        }\n      });\n      return _objectSpread({}, state, {\n        configs: configs2,\n        counters: counters2\n      });\n\n    case API_SET_DATA:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          [getConfigId(action.config)]: action.data\n        })\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/reducers/api.js"],"names":["API_ADD_CONFIGS","API_REMOVE_CONFIGS","API_SET_DATA","getConfigId","initialState","configs","data","counters","state","action","type","concat","forEach","config","id","push","configs2","counters2","filter","item"],"mappings":";;;;;;;;;;;;AAAA,SAAQA,eAAR,EAAyBC,kBAAzB,EAA6CC,YAA7C,EAA2DC,WAA3D,QAA6E,aAA7E;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAArB;AAMA,gBAAe,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,eAAL;AACI,YAAMK,OAAO,GAAG,GAAGM,MAAH,CAAUH,KAAK,CAACH,OAAhB,CAAhB;;AACA,YAAME,QAAQ,qBAAOC,KAAK,CAACD,QAAb,CAAd;;AACAE,MAAAA,MAAM,CAACJ,OAAP,CAAeO,OAAf,CAAuBC,MAAM,IAAI;AAC7B,cAAMC,EAAE,GAAGX,WAAW,CAACU,MAAD,CAAtB;;AACA,YAAIN,QAAQ,CAACO,EAAD,CAAZ,EAAkB;AACdP,UAAAA,QAAQ,CAACO,EAAD,CAAR;AACH,SAFD,MAEO;AACHP,UAAAA,QAAQ,CAACO,EAAD,CAAR,GAAe,CAAf;AACAT,UAAAA,OAAO,CAACU,IAAR,CAAaF,MAAb;AACH;AACJ,OARD;AAUA,+BACOL,KADP;AAEIH,QAAAA,OAFJ;AAGIE,QAAAA;AAHJ;;AAMJ,SAAKN,kBAAL;AACI,UAAIe,QAAQ,GAAG,GAAGL,MAAH,CAAUH,KAAK,CAACH,OAAhB,CAAf;;AACA,YAAMY,SAAS,qBAAOT,KAAK,CAACD,QAAb,CAAf;;AACAE,MAAAA,MAAM,CAACJ,OAAP,CAAeO,OAAf,CAAuBC,MAAM,IAAI;AAC7B,cAAMC,EAAE,GAAGX,WAAW,CAACU,MAAD,CAAtB;;AACA,YAAII,SAAS,CAACH,EAAD,CAAb,EAAmB;AACfG,UAAAA,SAAS,CAACH,EAAD,CAAT;;AAEA,cAAIG,SAAS,CAACH,EAAD,CAAT,IAAiB,CAArB,EAAwB;AACpBE,YAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgBC,IAAI,IAAIhB,WAAW,CAACgB,IAAD,CAAX,KAAsBL,EAA9C,CAAX;AACH;AACJ;AACJ,OATD;AAUA,+BACON,KADP;AAEIH,QAAAA,OAAO,EAAEW,QAFb;AAGIT,QAAAA,QAAQ,EAAEU;AAHd;;AAMJ,SAAKf,YAAL;AACI,+BACOM,KADP;AAEIF,QAAAA,IAAI,oBACGE,KAAK,CAACF,IADT;AAEA,WAACH,WAAW,CAACM,MAAM,CAACI,MAAR,CAAZ,GAA8BJ,MAAM,CAACH;AAFrC;AAFR;AAxCR;;AAiDA,SAAOE,KAAP;AACH,CAnDD","sourcesContent":["import {API_ADD_CONFIGS, API_REMOVE_CONFIGS, API_SET_DATA, getConfigId} from 'actions/api';\n\nconst initialState = {\n    configs: [],\n    data: {},\n    counters: {},\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case API_ADD_CONFIGS:\n            const configs = [].concat(state.configs);\n            const counters = {...state.counters};\n            action.configs.forEach(config => {\n                const id = getConfigId(config);\n                if (counters[id]) {\n                    counters[id]++;\n                } else {\n                    counters[id] = 1;\n                    configs.push(config);\n                }\n            });\n\n            return {\n                ...state,\n                configs,\n                counters,\n            };\n\n        case API_REMOVE_CONFIGS:\n            let configs2 = [].concat(state.configs);\n            const counters2 = {...state.counters};\n            action.configs.forEach(config => {\n                const id = getConfigId(config);\n                if (counters2[id]) {\n                    counters2[id]--;\n\n                    if (counters2[id] <= 0) {\n                        configs2 = configs2.filter(item => getConfigId(item) !== id);\n                    }\n                }\n            });\n            return {\n                ...state,\n                configs: configs2,\n                counters: counters2,\n            };\n\n        case API_SET_DATA:\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    [getConfigId(action.config)]: action.data,\n                },\n            };\n    }\n\n    return state;\n};\n"]},"metadata":{},"sourceType":"module"}