{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { round as _round, get as _get } from 'lodash';\nimport CurrencyEnum from '../enums/CurrencyEnum';\nimport { getAddressDefaultBalance, getAssetBalanceInfo } from './helpers';\nexport default class BalanceController {\n  constructor({\n    dalRef\n  }) {\n    _defineProperty(this, \"dal\", void 0);\n\n    _defineProperty(this, \"_timer\", void 0);\n\n    _defineProperty(this, \"_address\", void 0);\n\n    _defineProperty(this, \"_balances\", void 0);\n\n    _defineProperty(this, \"_lastTransactionId\", void 0);\n\n    _defineProperty(this, \"onUpdate\", void 0);\n\n    this.dal = dalRef;\n    this.onUpdate = null;\n    this._timer = null;\n    this._address = null;\n    this._balances = null;\n    this._lastTransactionId = null;\n    this._next = this._next.bind(this);\n  }\n\n  getBalances() {\n    return this._balances;\n  }\n\n  async start(address) {\n    if (this._address === address || !address) {\n      return;\n    }\n\n    this._address = address;\n    this._balances = null;\n    this._lastTransactionId = null; // if (!this._address) {\n    //     return;\n    // }\n\n    return await this._next();\n  }\n\n  stop() {\n    this._address = null;\n    this._balances = null;\n    this._lastTransactionId = null;\n\n    if (this._timer) {\n      clearTimeout(this._timer);\n    }\n  }\n\n  async _next() {\n    /*let transactionId = null;\n    if (this._address) {\n        try {\n            const result = await this._request(`transactions/address/${this._address}/limit/1`);\n            transactionId = result && result.length > 0 ? result[0].id : null;\n        } catch (e) {\n            console.error('BalanceListener error:', e);\n        }\n    }\n     if (transactionId !== this._lastTransactionId) {\n        this._lastTransactionId = transactionId;\n        await this._refreshBalance();\n    }*/\n    await this._refreshBalance(); // @ts-ignore\n\n    this._timer = setTimeout(this._next, 5000);\n  }\n\n  async _refreshBalance() {\n    const {\n      _address: address\n    } = this;\n\n    if (!address || !this.dal) {\n      return;\n    }\n\n    const balanceDict = {};\n    const wavesBalanceRes = await getAddressDefaultBalance({\n      nodeUrl: this.dal.nodeUrl,\n      address\n    });\n    balanceDict[CurrencyEnum.WAVES] = _get(wavesBalanceRes.data, 'balance', null);\n\n    for (const currency in this.dal.assets) {\n      if (this.dal.assets.hasOwnProperty(currency)) {\n        const assetId = this.dal.assets[currency];\n        const newBalanceRes = await getAssetBalanceInfo({\n          nodeUrl: this.dal.nodeUrl,\n          address,\n          assetId\n        });\n        balanceDict[currency] = newBalanceRes.data.balance || null;\n      }\n    } // Normalize\n\n\n    _Object$keys(balanceDict).forEach(currency => {\n      balanceDict[currency] = _round(balanceDict[currency] / CurrencyEnum.getContractPow(currency), 2);\n    });\n\n    if (address === this._address) {\n      this._balances = balanceDict;\n\n      if (this.onUpdate) {\n        this.onUpdate(balanceDict);\n      }\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}