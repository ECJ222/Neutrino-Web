{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { round as _round, get as _get } from 'lodash';\nimport CurrencyEnum from '../enums/CurrencyEnum';\nimport { getAddressDefaultBalance, getAssetBalanceInfo } from './helpers';\nexport default class BalanceController {\n  constructor({\n    dalRef\n  }) {\n    _defineProperty(this, \"dal\", void 0);\n\n    _defineProperty(this, \"_timer\", void 0);\n\n    _defineProperty(this, \"_address\", void 0);\n\n    _defineProperty(this, \"_balances\", void 0);\n\n    _defineProperty(this, \"_lastTransactionId\", void 0);\n\n    _defineProperty(this, \"onUpdate\", void 0);\n\n    this.dal = dalRef;\n    this.onUpdate = null;\n    this._timer = null;\n    this._address = null;\n    this._balances = null;\n    this._lastTransactionId = null;\n    this._next = this._next.bind(this);\n  }\n\n  getBalances() {\n    return this._balances;\n  }\n\n  async start(address) {\n    if (this._address === address || !address) {\n      return;\n    }\n\n    this._address = address;\n    this._balances = null;\n    this._lastTransactionId = null; // if (!this._address) {\n    //     return;\n    // }\n\n    return await this._next();\n  }\n\n  stop() {\n    this._address = null;\n    this._balances = null;\n    this._lastTransactionId = null;\n\n    if (this._timer) {\n      clearTimeout(this._timer);\n    }\n  }\n\n  async _next() {\n    /*let transactionId = null;\n    if (this._address) {\n        try {\n            const result = await this._request(`transactions/address/${this._address}/limit/1`);\n            transactionId = result && result.length > 0 ? result[0].id : null;\n        } catch (e) {\n            console.error('BalanceListener error:', e);\n        }\n    }\n     if (transactionId !== this._lastTransactionId) {\n        this._lastTransactionId = transactionId;\n        await this._refreshBalance();\n    }*/\n    await this._refreshBalance(); // @ts-ignore\n\n    this._timer = setTimeout(this._next, 5000);\n  }\n\n  async _refreshBalance() {\n    const {\n      _address: address\n    } = this;\n\n    if (!address || !this.dal) {\n      return;\n    }\n\n    const balanceDict = {};\n    const wavesBalanceRes = await getAddressDefaultBalance({\n      nodeUrl: this.dal.nodeUrl,\n      address\n    });\n    balanceDict[CurrencyEnum.WAVES] = _get(wavesBalanceRes.data, 'balance', null);\n\n    for (const currency in this.dal.assets) {\n      if (this.dal.assets.hasOwnProperty(currency)) {\n        const assetId = this.dal.assets[currency];\n        const newBalanceRes = await getAssetBalanceInfo({\n          nodeUrl: this.dal.nodeUrl,\n          address,\n          assetId\n        });\n        balanceDict[currency] = newBalanceRes.data.balance || null;\n      }\n    } // Normalize\n\n\n    _Object$keys(balanceDict).forEach(currency => {\n      balanceDict[currency] = _round(balanceDict[currency] / CurrencyEnum.getContractPow(currency), 2);\n    });\n\n    if (address === this._address) {\n      this._balances = balanceDict;\n\n      if (this.onUpdate) {\n        this.onUpdate(balanceDict);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/contractControllers/BalanceController.ts"],"names":["round","_round","get","_get","CurrencyEnum","getAddressDefaultBalance","getAssetBalanceInfo","BalanceController","constructor","dalRef","dal","onUpdate","_timer","_address","_balances","_lastTransactionId","_next","bind","getBalances","start","address","stop","clearTimeout","_refreshBalance","setTimeout","balanceDict","wavesBalanceRes","nodeUrl","WAVES","data","currency","assets","hasOwnProperty","assetId","newBalanceRes","balance","forEach","getContractPow"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { round as _round, isEqual as _isEqual, get as _get } from 'lodash';\n\nimport CurrencyEnum from '../enums/CurrencyEnum';\nimport DalComponent from '../components/DalComponent';\n\nimport { getAddressDefaultBalance, getAssetBalanceInfo } from './helpers';\n\ninterface BalanceDictionary {\n    [key: string]: number | null;\n}\n\nexport default class BalanceController {\n    private dal: DalComponent | null;\n    private _timer: NodeJS.Timeout | null;\n    private _address: string | null;\n    private _balances: BalanceDictionary | null;\n    private _lastTransactionId: string | null;\n    onUpdate: (balances: BalanceDictionary) => Promise<void> | null;\n\n    constructor({ dalRef }: { dalRef: DalComponent }) {\n        this.dal = dalRef;\n        this.onUpdate = null;\n\n        this._timer = null;\n        this._address = null;\n        this._balances = null;\n        this._lastTransactionId = null;\n\n        this._next = this._next.bind(this);\n    }\n\n    getBalances() {\n        return this._balances;\n    }\n\n    async start(address?: string) {\n        if (this._address === address || !address) {\n            return;\n        }\n\n        this._address = address;\n        this._balances = null;\n        this._lastTransactionId = null;\n\n        // if (!this._address) {\n        //     return;\n        // }\n\n        return await this._next();\n    }\n\n    stop() {\n        this._address = null;\n        this._balances = null;\n        this._lastTransactionId = null;\n\n        if (this._timer) {\n            clearTimeout(this._timer);\n        }\n    }\n\n    async _next() {\n        /*let transactionId = null;\n        if (this._address) {\n            try {\n                const result = await this._request(`transactions/address/${this._address}/limit/1`);\n                transactionId = result && result.length > 0 ? result[0].id : null;\n            } catch (e) {\n                console.error('BalanceListener error:', e);\n            }\n        }\n\n        if (transactionId !== this._lastTransactionId) {\n            this._lastTransactionId = transactionId;\n            await this._refreshBalance();\n        }*/\n\n        await this._refreshBalance();\n\n        // @ts-ignore\n        this._timer = setTimeout(this._next, 5000);\n    }\n\n    async _refreshBalance() {\n        const { _address: address } = this;\n\n        if (!address || !this.dal) {\n            return;\n        }\n\n        const balanceDict: BalanceDictionary = {};\n\n        const wavesBalanceRes = await getAddressDefaultBalance({\n            nodeUrl: this.dal.nodeUrl,\n            address\n        });\n\n        balanceDict[CurrencyEnum.WAVES] = _get(\n            wavesBalanceRes.data,\n            'balance',\n            null\n        );\n\n        for (const currency in this.dal.assets) {\n            if (this.dal.assets.hasOwnProperty(currency)) {\n                const assetId = this.dal.assets[currency];\n                const newBalanceRes = await getAssetBalanceInfo({\n                    nodeUrl: this.dal.nodeUrl,\n                    address,\n                    assetId\n                });\n\n                balanceDict[currency] = newBalanceRes.data.balance || null;\n            }\n        }\n\n        // Normalize\n        Object.keys(balanceDict).forEach((currency) => {\n            balanceDict[currency] = _round(\n                balanceDict[currency] / CurrencyEnum.getContractPow(currency),\n                2\n            );\n        });\n\n        if (address === this._address) {\n            this._balances = balanceDict;\n\n            if (this.onUpdate) {\n                this.onUpdate(balanceDict);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}