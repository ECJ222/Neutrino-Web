{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport { push } from 'react-router-redux';\nimport { http } from 'components';\nexport var NAVIGATION_INIT_ROUTES = 'NAVIGATION_INIT_ROUTES';\nexport var NAVIGATION_SET_PARAMS = 'NAVIGATION_SET_PARAMS';\nexport var NAVIGATION_ADD_CONFIGS = 'NAVIGATION_ADD_CONFIGS';\nexport var NAVIGATION_REMOVE_CONFIGS = 'NAVIGATION_REMOVE_CONFIGS';\nexport var NAVIGATION_SET_DATA = 'NAVIGATION_SET_DATA';\n\nvar normalizeConfigs = function normalizeConfigs(configs) {\n  if (!configs) {\n    configs = [];\n  }\n\n  if (!_isArray(configs)) {\n    configs = [configs];\n  }\n\n  configs.forEach(function (config, index) {\n    if (!config.key || !config.url) {\n      throw new Error('key and url is required');\n    }\n\n    configs[index] = _objectSpread({\n      method: 'get',\n      params: {}\n    }, config);\n  });\n  return configs;\n};\n\nvar fetch = function fetch(config) {\n  return http.send(config.method, config.url, config.params).then(function (result) {\n    return result.data;\n  });\n};\n\nexport var initRoutes = function initRoutes(routesTree) {\n  return {\n    type: NAVIGATION_INIT_ROUTES,\n    routesTree: routesTree\n  };\n};\nexport var initParams = function initParams(params) {\n  return {\n    type: NAVIGATION_SET_PARAMS,\n    params: params\n  };\n};\nexport var goToPage = function goToPage(pageId, params) {\n  return function (dispatch, getState) {\n    var getNavUrl = require('../reducers/navigation').getNavUrl;\n\n    return dispatch(push(getNavUrl(getState(), pageId, params)));\n  };\n};\nexport var getConfigId = function getConfigId(config) {\n  return config.id || _trim(config.url, '/');\n};\nexport var navigationAddConfigs = function navigationAddConfigs(configs) {\n  return function (dispatch) {\n    configs = normalizeConfigs(configs);\n    dispatch({\n      type: NAVIGATION_ADD_CONFIGS,\n      configs: configs\n    });\n    configs.forEach(function (config) {\n      fetch(config).then(function (data) {\n        return dispatch({\n          type: NAVIGATION_SET_DATA,\n          config: config,\n          data: data\n        });\n      });\n    });\n  };\n};\nexport var navigationRemoveConfigs = function navigationRemoveConfigs(configs) {\n  configs = normalizeConfigs(configs);\n  return {\n    type: NAVIGATION_REMOVE_CONFIGS,\n    configs: configs\n  };\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/actions/navigation.js"],"names":["_isArray","_trim","push","http","NAVIGATION_INIT_ROUTES","NAVIGATION_SET_PARAMS","NAVIGATION_ADD_CONFIGS","NAVIGATION_REMOVE_CONFIGS","NAVIGATION_SET_DATA","normalizeConfigs","configs","forEach","config","index","key","url","Error","method","params","fetch","send","then","result","data","initRoutes","routesTree","type","initParams","goToPage","pageId","dispatch","getState","getNavUrl","require","getConfigId","id","navigationAddConfigs","navigationRemoveConfigs"],"mappings":"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","sourcesContent":["import _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport {push} from 'react-router-redux';\n\nimport {http} from 'components';\n\nexport const NAVIGATION_INIT_ROUTES = 'NAVIGATION_INIT_ROUTES';\nexport const NAVIGATION_SET_PARAMS = 'NAVIGATION_SET_PARAMS';\nexport const NAVIGATION_ADD_CONFIGS = 'NAVIGATION_ADD_CONFIGS';\nexport const NAVIGATION_REMOVE_CONFIGS = 'NAVIGATION_REMOVE_CONFIGS';\nexport const NAVIGATION_SET_DATA = 'NAVIGATION_SET_DATA';\n\nconst normalizeConfigs = configs => {\n    if (!configs) {\n        configs = [];\n    }\n    if (!_isArray(configs)) {\n        configs = [configs];\n    }\n\n    configs.forEach((config, index) => {\n        if (!config.key || !config.url) {\n            throw new Error('key and url is required');\n        }\n\n        configs[index] = {\n            method: 'get',\n            params: {},\n            ...config,\n        };\n    });\n\n    return configs;\n};\n\nconst fetch = config => http.send(config.method, config.url, config.params).then(result => result.data);\n\nexport const initRoutes = routesTree => ({\n    type: NAVIGATION_INIT_ROUTES,\n    routesTree,\n});\n\nexport const initParams = params => ({\n    type: NAVIGATION_SET_PARAMS,\n    params,\n});\n\nexport const goToPage = (pageId, params) => (dispatch, getState) => {\n    const getNavUrl = require('../reducers/navigation').getNavUrl;\n    return dispatch(push(getNavUrl(getState(), pageId, params)));\n};\n\nexport const getConfigId = config => config.id || _trim(config.url, '/');\n\nexport const navigationAddConfigs = configs => dispatch => {\n    configs = normalizeConfigs(configs);\n\n    dispatch({\n        type: NAVIGATION_ADD_CONFIGS,\n        configs,\n    });\n\n    configs.forEach(config => {\n        fetch(config)\n            .then(data => dispatch({\n                type: NAVIGATION_SET_DATA,\n                config,\n                data,\n            }));\n    });\n};\n\nexport const navigationRemoveConfigs = configs => {\n    configs = normalizeConfigs(configs);\n\n    return {\n        type: NAVIGATION_REMOVE_CONFIGS,\n        configs,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}