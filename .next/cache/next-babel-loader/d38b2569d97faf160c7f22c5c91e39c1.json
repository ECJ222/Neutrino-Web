{"ast":null,"code":"import _Number$isInteger from \"@babel/runtime-corejs2/core-js/number/is-integer\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _get from 'lodash/get';\nimport _isEqual from 'lodash/isEqual';\nimport { setUser } from 'yii-steroids/actions/auth';\nimport apiHoc from './dal/apiHoc';\nimport { clientStorage } from 'components';\nimport BalanceController from '../contractControllers/BalanceController';\nimport Keeper from './dal/Keeper';\nimport axios from 'axios';\nimport ContractEnum from '../enums/ContractEnum';\nimport UserRole from 'enums/UserRole';\nimport OrderTypeEnum from 'enums/OrderTypeEnum';\nexport var STORAGE_AUTH_KEY = 'isAuth';\n\nvar DalComponent =\n/*#__PURE__*/\nfunction () {\n  function DalComponent() {\n    _classCallCheck(this, DalComponent);\n\n    this.network = null;\n    this.nodeUrl = null;\n    this.assets = null;\n    this.contracts = null;\n    this.hoc = apiHoc;\n    this.balance = new BalanceController({\n      dalRef: this\n    });\n    this.balance.onUpdate = this.login.bind(this);\n    this.keeper = new Keeper(this);\n    this.keeper.onUpdate = this.login.bind(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      window.dal = this;\n    }\n  }\n  /**\n   * Auth current user and return it data\n   * @returns {Promise}\n   */\n\n\n  _createClass(DalComponent, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var account, user, store, storeUser;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.keeper.getAccount();\n\n              case 2:\n                account = _context.sent;\n                _context.next = 5;\n                return this.keeper.start();\n\n              case 5:\n                _context.next = 7;\n                return this.balance.start(account.address);\n\n              case 7:\n                // Keeper user\n                user = account ? {\n                  role: UserRole.REGISTERED,\n                  address: account.address,\n                  network: account.network,\n                  balances: this.balance.getBalances()\n                } : null; // Mark logged\n\n                if (account && !this.isLogged()) {\n                  clientStorage.set(STORAGE_AUTH_KEY, '1');\n                } // Update redux store\n\n\n                store = require('components').store;\n                storeUser = store.getState().auth.user || null;\n\n                if (!_isEqual(storeUser, user)) {\n                  store.dispatch(setUser(user));\n                }\n\n                return _context.abrupt(\"return\", user);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Check is logged flag\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isLogged\",\n    value: function isLogged() {\n      return clientStorage.get(STORAGE_AUTH_KEY) === '1';\n    }\n    /**\n     * Logout user\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                require('components').store.dispatch(setUser(null));\n\n                clientStorage.remove(STORAGE_AUTH_KEY);\n                this.keeper.stop();\n                this.balance.stop();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"swapWavesToNeutrino\",\n    value: function () {\n      var _swapWavesToNeutrino = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(pairName, amount) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'swapWavesToNeutrino', [], 'WAVES', amount);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function swapWavesToNeutrino(_x, _x2) {\n        return _swapWavesToNeutrino.apply(this, arguments);\n      }\n\n      return swapWavesToNeutrino;\n    }()\n  }, {\n    key: \"swapNeutrinoToWaves\",\n    value: function () {\n      var _swapNeutrinoToWaves = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(pairName, paymentCurrency, amount) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'swapNeutrinoToWaves', [], this.assets[paymentCurrency], amount);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function swapNeutrinoToWaves(_x3, _x4, _x5) {\n        return _swapNeutrinoToWaves.apply(this, arguments);\n      }\n\n      return swapNeutrinoToWaves;\n    }()\n  }, {\n    key: \"withdraw\",\n    value: function () {\n      var _withdraw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(pairName, address, index) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'withdraw', [address, index], 'WAVES', 0);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function withdraw(_x6, _x7, _x8) {\n        return _withdraw.apply(this, arguments);\n      }\n\n      return withdraw;\n    }()\n  }, {\n    key: \"setBondOrder\",\n    value: function () {\n      var _setBondOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(pairName, price, paymentCurrency, bondsAmount) {\n        var contractPrice, position;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(price <= 0 || price >= 1)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                price = Math.round(price * 100) / 100;\n                contractPrice = price * 100;\n                _context6.t0 = _get;\n                _context6.next = 7;\n                return axios.get(\"/api/v1/bonds/\".concat(pairName, \"/position\"), {\n                  params: {\n                    price: contractPrice\n                  }\n                });\n\n              case 7:\n                _context6.t1 = _context6.sent;\n                position = (0, _context6.t0)(_context6.t1, 'data.position');\n\n                if (!(price > 0 && bondsAmount > 0 && _Number$isInteger(position))) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 12;\n                return this.keeper.sendTransaction(pairName, ContractEnum.AUCTION, 'addBuyBondOrder', [contractPrice, position], this.assets[paymentCurrency], bondsAmount * price);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setBondOrder(_x9, _x10, _x11, _x12) {\n        return _setBondOrder.apply(this, arguments);\n      }\n\n      return setBondOrder;\n    }()\n  }, {\n    key: \"setLiquidateOrder\",\n    value: function () {\n      var _setLiquidateOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(pairName, paymentCurrency, total) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.LIQUIDATION, 'addLiquidationOrder', [], this.assets[paymentCurrency], total);\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function setLiquidateOrder(_x13, _x14, _x15) {\n        return _setLiquidateOrder.apply(this, arguments);\n      }\n\n      return setLiquidateOrder;\n    }()\n  }, {\n    key: \"cancelOrder\",\n    value: function () {\n      var _cancelOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(pairName, type, hash) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.t0 = type;\n                _context8.next = _context8.t0 === OrderTypeEnum.BUY ? 3 : _context8.t0 === OrderTypeEnum.LIQUIDATE ? 6 : 9;\n                break;\n\n              case 3:\n                _context8.next = 5;\n                return this.keeper.sendTransaction(pairName, ContractEnum.AUCTION, 'cancelOrder', [hash], 'WAVES', 0);\n\n              case 5:\n                return _context8.abrupt(\"break\", 9);\n\n              case 6:\n                _context8.next = 8;\n                return this.keeper.sendTransaction(pairName, ContractEnum.LIQUIDATION, 'cancelOrder', [hash], 'WAVES', 0);\n\n              case 8:\n                return _context8.abrupt(\"break\", 9);\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function cancelOrder(_x16, _x17, _x18) {\n        return _cancelOrder.apply(this, arguments);\n      }\n\n      return cancelOrder;\n    }() //RPD\n\n  }, {\n    key: \"lockNeutrino\",\n    value: function () {\n      var _lockNeutrino = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(pairName, paymentCurrency, amount) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.RPD, 'lockNeutrino', [], this.assets[paymentCurrency], amount);\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function lockNeutrino(_x19, _x20, _x21) {\n        return _lockNeutrino.apply(this, arguments);\n      }\n\n      return lockNeutrino;\n    }()\n  }, {\n    key: \"unlockNeutrino\",\n    value: function () {\n      var _unlockNeutrino = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(pairName, paymentCurrency, amount) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.RPD, 'unlockNeutrino', [amount, this.assets[paymentCurrency]], 'WAVES', 0);\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function unlockNeutrino(_x22, _x23, _x24) {\n        return _unlockNeutrino.apply(this, arguments);\n      }\n\n      return unlockNeutrino;\n    }()\n  }, {\n    key: \"checkWithdraw\",\n    value: function () {\n      var _checkWithdraw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(pairName, index, historyIndex) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.RPD, 'withdraw', [index, historyIndex], 'WAVES', 0);\n\n              case 2:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function checkWithdraw(_x25, _x26, _x27) {\n        return _checkWithdraw.apply(this, arguments);\n      }\n\n      return checkWithdraw;\n    }()\n  }, {\n    key: \"transferFunds\",\n    value: function () {\n      var _transferFunds = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(pairName, paymentCurrency, address, amount) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.keeper.transfer(pairName, address, amount, this.assets[paymentCurrency] || 'WAVES');\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function transferFunds(_x28, _x29, _x30, _x31) {\n        return _transferFunds.apply(this, arguments);\n      }\n\n      return transferFunds;\n    }()\n  }]);\n\n  return DalComponent;\n}();\n\nexport { DalComponent as default };","map":null,"metadata":{},"sourceType":"module"}