{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\nimport _get from 'lodash-es/get';\nimport _merge from 'lodash-es/merge';\nimport _isPlainObject from 'lodash-es/isPlainObject';\nimport reducers from 'reducers';\nexport default class StoreComponent {\n  constructor(lazyInit = false) {\n    this.history = null;\n    this.store = null;\n    this._asyncReducers = {};\n\n    if (!lazyInit) {\n      this.initStore();\n    }\n  }\n\n  init(config = {}) {\n    this.initStore(config);\n    this.configurate();\n  }\n\n  initStore(config = {}) {\n    const initialState = _objectSpread({}, !process.env.IS_NODE ? _merge(...(window.APP_REDUX_PRELOAD_STATES || [{}])) : {}, {}, config.initialState);\n\n    const createHistory = process.env.IS_NODE ? createMemoryHistory : createBrowserHistory;\n    this.history = createHistory(_objectSpread({}, _get(initialState, 'config.store.history', {}), {}, config.history));\n    this.store = createStore(reducers(), initialState, compose(applyMiddleware(({\n      getState\n    }) => next => action => this._prepare(action, next, getState)), applyMiddleware(routerMiddleware(this.history)), window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f));\n  }\n\n  configurate() {\n    // Apply configuration\n    const customConfig = this.getState().config || {};\n\n    const components = require('components');\n\n    _merge(components.clientStorage, customConfig.clientStorage);\n\n    _merge(components.html, customConfig.html);\n\n    _merge(components.http, customConfig.http);\n\n    _merge(components.locale, customConfig.locale);\n\n    _merge(components.resource, customConfig.resource);\n\n    _merge(components.store, customConfig.store);\n\n    _merge(components.ui, customConfig.ui);\n\n    _merge(components.widget, customConfig.widget);\n  }\n\n  dispatch(action) {\n    return this.store.dispatch(action);\n  }\n\n  getState() {\n    return this.store.getState();\n  }\n\n  addReducers(asyncReducers) {\n    this._asyncReducers = _objectSpread({}, this._asyncReducers, {}, asyncReducers);\n    this.store.replaceReducer(reducers(this._asyncReducers));\n  }\n\n  errorHandler(error) {\n    throw error;\n  }\n\n  _prepare(action, dispatch, getState) {\n    // Multiple dispatch (redux-multi)\n    if (_Array$isArray(action)) {\n      return action.filter(v => v).map(p => this._prepare(p, dispatch, getState));\n    } // Function wraper (redux-thunk)\n\n\n    if (typeof action === 'function') {\n      return action(p => this._prepare(p, dispatch, getState), getState);\n    } // Promise, detect errors on rejects\n    // Detect action through instanceof Promise is not working in production mode, then used single detection by type\n\n\n    if (typeof action === 'object' && typeof action.then === 'function' && typeof action.catch === 'function') {\n      return action.then(payload => this._prepare(payload, dispatch, getState)).catch(e => {\n        this.errorHandler(e, p => this._prepare(p, dispatch, getState));\n      });\n    } // Default case\n\n\n    if (_isPlainObject(action) && action.type) {\n      if (process.env.NODE_ENV !== 'production') {\n        window.__snapshot = (window.__snapshot || []).concat({\n          action\n        });\n      }\n\n      try {\n        return dispatch(action);\n      } catch (e) {\n        this.errorHandler(e, p => this._prepare(p, dispatch, getState));\n      }\n    }\n\n    return action;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}