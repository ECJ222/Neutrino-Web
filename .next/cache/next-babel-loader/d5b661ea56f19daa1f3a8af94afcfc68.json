{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport { http } from 'components';\nimport { getPairName } from 'reducers/currency';\nexport const API_ADD_CONFIGS = 'API_ADD_CONFIGS';\nexport const API_REMOVE_CONFIGS = 'API_REMOVE_CONFIGS';\nexport const API_SET_DATA = 'API_SET_DATA';\n\nconst normalizeConfigs = configs => {\n  if (!configs) {\n    configs = [];\n  }\n\n  if (!_isArray(configs)) {\n    configs = [configs];\n  }\n\n  configs.forEach((config, index) => {\n    if (!config.key || !config.url) {\n      throw new Error('key and url is required');\n    }\n\n    configs[index] = _objectSpread({\n      method: 'get',\n      params: {}\n    }, config);\n  });\n  return configs;\n};\n\nconst fetch = config => http.send(config.method, config.url, config.params).then(result => result.data);\n\nexport const getConfigId = config => config.id || _trim(config.url, '/');\nexport const apiAddConfigs = configs => dispatch => {\n  configs = normalizeConfigs(configs);\n  dispatch({\n    type: API_ADD_CONFIGS,\n    configs\n  });\n  configs.forEach(config => {\n    fetch(config).then(data => dispatch({\n      type: API_SET_DATA,\n      config,\n      data\n    }));\n  });\n};\nexport const apiRemoveConfigs = configs => {\n  configs = normalizeConfigs(configs);\n  return {\n    type: API_REMOVE_CONFIGS,\n    configs\n  };\n};\nexport const apiWsHandler = event => (dispatch, getState) => {\n  if (event.stream === 'collections') {\n    const state = getState();\n    const configs = state.api.configs;\n\n    if (event.data.pairName === getPairName(state)) {\n      configs.forEach(config => {\n        if ([].concat(config.collection).includes(event.data.collectionName)) {\n          fetch(config).then(data => dispatch({\n            type: API_SET_DATA,\n            config,\n            data\n          }));\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/actions/api.js"],"names":["_isArray","_trim","http","getPairName","API_ADD_CONFIGS","API_REMOVE_CONFIGS","API_SET_DATA","normalizeConfigs","configs","forEach","config","index","key","url","Error","method","params","fetch","send","then","result","data","getConfigId","id","apiAddConfigs","dispatch","type","apiRemoveConfigs","apiWsHandler","event","getState","stream","state","api","pairName","concat","collection","includes","collectionName"],"mappings":"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","sourcesContent":["import _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport {http} from 'components';\nimport {getPairName} from 'reducers/currency';\n\nexport const API_ADD_CONFIGS = 'API_ADD_CONFIGS';\nexport const API_REMOVE_CONFIGS = 'API_REMOVE_CONFIGS';\nexport const API_SET_DATA = 'API_SET_DATA';\n\nconst normalizeConfigs = configs => {\n    if (!configs) {\n        configs = [];\n    }\n    if (!_isArray(configs)) {\n        configs = [configs];\n    }\n\n    configs.forEach((config, index) => {\n        if (!config.key || !config.url) {\n            throw new Error('key and url is required');\n        }\n\n        configs[index] = {\n            method: 'get',\n            params: {},\n            ...config,\n        };\n    });\n\n    return configs;\n};\n\nconst fetch = config => http.send(config.method, config.url, config.params).then(result => result.data);\n\nexport const getConfigId = config => config.id || _trim(config.url, '/');\n\nexport const apiAddConfigs = configs => dispatch => {\n    configs = normalizeConfigs(configs);\n\n    dispatch({\n        type: API_ADD_CONFIGS,\n        configs,\n    });\n\n    configs.forEach(config => {\n        fetch(config)\n            .then(data => dispatch({\n                type: API_SET_DATA,\n                config,\n                data,\n            }));\n    });\n};\n\nexport const apiRemoveConfigs = configs => {\n    configs = normalizeConfigs(configs);\n\n    return {\n        type: API_REMOVE_CONFIGS,\n        configs,\n    };\n};\n\nexport const apiWsHandler = event => (dispatch, getState) => {\n    if (event.stream === 'collections') {\n        const state = getState();\n        const configs = state.api.configs;\n        if (event.data.pairName === getPairName(state)) {\n            configs.forEach(config => {\n                if ([].concat(config.collection).includes(event.data.collectionName)) {\n                    fetch(config)\n                        .then(data => dispatch({\n                            type: API_SET_DATA,\n                            config,\n                            data,\n                        }));\n                }\n            });\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}