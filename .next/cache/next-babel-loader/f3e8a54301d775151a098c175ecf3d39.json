{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport { http } from 'components';\nimport { getPairName } from 'reducers/currency';\nexport var API_ADD_CONFIGS = 'API_ADD_CONFIGS';\nexport var API_REMOVE_CONFIGS = 'API_REMOVE_CONFIGS';\nexport var API_SET_DATA = 'API_SET_DATA';\n\nvar normalizeConfigs = function normalizeConfigs(configs) {\n  if (!configs) {\n    configs = [];\n  }\n\n  if (!_isArray(configs)) {\n    configs = [configs];\n  }\n\n  configs.forEach(function (config, index) {\n    if (!config.key || !config.url) {\n      throw new Error('key and url is required');\n    }\n\n    configs[index] = _objectSpread({\n      method: 'get',\n      params: {}\n    }, config);\n  });\n  return configs;\n};\n\nvar fetch = function fetch(config) {\n  return http.send(config.method, config.url, config.params).then(function (result) {\n    return result.data;\n  });\n};\n\nexport var getConfigId = function getConfigId(config) {\n  return config.id || _trim(config.url, '/');\n};\nexport var apiAddConfigs = function apiAddConfigs(configs) {\n  return function (dispatch) {\n    configs = normalizeConfigs(configs);\n    dispatch({\n      type: API_ADD_CONFIGS,\n      configs: configs\n    });\n    configs.forEach(function (config) {\n      fetch(config).then(function (data) {\n        return dispatch({\n          type: API_SET_DATA,\n          config: config,\n          data: data\n        });\n      });\n    });\n  };\n};\nexport var apiRemoveConfigs = function apiRemoveConfigs(configs) {\n  configs = normalizeConfigs(configs);\n  return {\n    type: API_REMOVE_CONFIGS,\n    configs: configs\n  };\n};\nexport var apiWsHandler = function apiWsHandler(event) {\n  return function (dispatch, getState) {\n    if (event.stream === 'collections') {\n      var state = getState();\n      var configs = state.api.configs;\n\n      if (event.data.pairName === getPairName(state)) {\n        configs.forEach(function (config) {\n          if ([].concat(config.collection).includes(event.data.collectionName)) {\n            fetch(config).then(function (data) {\n              return dispatch({\n                type: API_SET_DATA,\n                config: config,\n                data: data\n              });\n            });\n          }\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/actions/api.js"],"names":["_isArray","_trim","http","getPairName","API_ADD_CONFIGS","API_REMOVE_CONFIGS","API_SET_DATA","normalizeConfigs","configs","forEach","config","index","key","url","Error","method","params","fetch","send","then","result","data","getConfigId","id","apiAddConfigs","dispatch","type","apiRemoveConfigs","apiWsHandler","event","getState","stream","state","api","pairName","concat","collection","includes","collectionName"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AAEA,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;;AAEP,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO,EAAI;AAChC,MAAI,CAACA,OAAL,EAAc;AACVA,IAAAA,OAAO,GAAG,EAAV;AACH;;AACD,MAAI,CAACR,QAAQ,CAACQ,OAAD,CAAb,EAAwB;AACpBA,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACH;;AAEDA,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC/B,QAAI,CAACD,MAAM,CAACE,GAAR,IAAe,CAACF,MAAM,CAACG,GAA3B,EAAgC;AAC5B,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAEDN,IAAAA,OAAO,CAACG,KAAD,CAAP;AACII,MAAAA,MAAM,EAAE,KADZ;AAEIC,MAAAA,MAAM,EAAE;AAFZ,OAGON,MAHP;AAKH,GAVD;AAYA,SAAOF,OAAP;AACH,CArBD;;AAuBA,IAAMS,KAAK,GAAG,SAARA,KAAQ,CAAAP,MAAM;AAAA,SAAIR,IAAI,CAACgB,IAAL,CAAUR,MAAM,CAACK,MAAjB,EAAyBL,MAAM,CAACG,GAAhC,EAAqCH,MAAM,CAACM,MAA5C,EAAoDG,IAApD,CAAyD,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,IAAX;AAAA,GAA/D,CAAJ;AAAA,CAApB;;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAZ,MAAM;AAAA,SAAIA,MAAM,CAACa,EAAP,IAAatB,KAAK,CAACS,MAAM,CAACG,GAAR,EAAa,GAAb,CAAtB;AAAA,CAA1B;AAEP,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAAAhB,OAAO;AAAA,SAAI,UAAAiB,QAAQ,EAAI;AAChDjB,IAAAA,OAAO,GAAGD,gBAAgB,CAACC,OAAD,CAA1B;AAEAiB,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEtB,eADD;AAELI,MAAAA,OAAO,EAAPA;AAFK,KAAD,CAAR;AAKAA,IAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACtBO,MAAAA,KAAK,CAACP,MAAD,CAAL,CACKS,IADL,CACU,UAAAE,IAAI;AAAA,eAAII,QAAQ,CAAC;AACnBC,UAAAA,IAAI,EAAEpB,YADa;AAEnBI,UAAAA,MAAM,EAANA,MAFmB;AAGnBW,UAAAA,IAAI,EAAJA;AAHmB,SAAD,CAAZ;AAAA,OADd;AAMH,KAPD;AAQH,GAhBmC;AAAA,CAA7B;AAkBP,OAAO,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAnB,OAAO,EAAI;AACvCA,EAAAA,OAAO,GAAGD,gBAAgB,CAACC,OAAD,CAA1B;AAEA,SAAO;AACHkB,IAAAA,IAAI,EAAErB,kBADH;AAEHG,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH,CAPM;AASP,OAAO,IAAMoB,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,SAAI,UAACJ,QAAD,EAAWK,QAAX,EAAwB;AACzD,QAAID,KAAK,CAACE,MAAN,KAAiB,aAArB,EAAoC;AAChC,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;AACA,UAAMtB,OAAO,GAAGwB,KAAK,CAACC,GAAN,CAAUzB,OAA1B;;AACA,UAAIqB,KAAK,CAACR,IAAN,CAAWa,QAAX,KAAwB/B,WAAW,CAAC6B,KAAD,CAAvC,EAAgD;AAC5CxB,QAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACtB,cAAI,GAAGyB,MAAH,CAAUzB,MAAM,CAAC0B,UAAjB,EAA6BC,QAA7B,CAAsCR,KAAK,CAACR,IAAN,CAAWiB,cAAjD,CAAJ,EAAsE;AAClErB,YAAAA,KAAK,CAACP,MAAD,CAAL,CACKS,IADL,CACU,UAAAE,IAAI;AAAA,qBAAII,QAAQ,CAAC;AACnBC,gBAAAA,IAAI,EAAEpB,YADa;AAEnBI,gBAAAA,MAAM,EAANA,MAFmB;AAGnBW,gBAAAA,IAAI,EAAJA;AAHmB,eAAD,CAAZ;AAAA,aADd;AAMH;AACJ,SATD;AAUH;AACJ;AACJ,GAjBgC;AAAA,CAA1B","sourcesContent":["import _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport {http} from 'components';\nimport {getPairName} from 'reducers/currency';\n\nexport const API_ADD_CONFIGS = 'API_ADD_CONFIGS';\nexport const API_REMOVE_CONFIGS = 'API_REMOVE_CONFIGS';\nexport const API_SET_DATA = 'API_SET_DATA';\n\nconst normalizeConfigs = configs => {\n    if (!configs) {\n        configs = [];\n    }\n    if (!_isArray(configs)) {\n        configs = [configs];\n    }\n\n    configs.forEach((config, index) => {\n        if (!config.key || !config.url) {\n            throw new Error('key and url is required');\n        }\n\n        configs[index] = {\n            method: 'get',\n            params: {},\n            ...config,\n        };\n    });\n\n    return configs;\n};\n\nconst fetch = config => http.send(config.method, config.url, config.params).then(result => result.data);\n\nexport const getConfigId = config => config.id || _trim(config.url, '/');\n\nexport const apiAddConfigs = configs => dispatch => {\n    configs = normalizeConfigs(configs);\n\n    dispatch({\n        type: API_ADD_CONFIGS,\n        configs,\n    });\n\n    configs.forEach(config => {\n        fetch(config)\n            .then(data => dispatch({\n                type: API_SET_DATA,\n                config,\n                data,\n            }));\n    });\n};\n\nexport const apiRemoveConfigs = configs => {\n    configs = normalizeConfigs(configs);\n\n    return {\n        type: API_REMOVE_CONFIGS,\n        configs,\n    };\n};\n\nexport const apiWsHandler = event => (dispatch, getState) => {\n    if (event.stream === 'collections') {\n        const state = getState();\n        const configs = state.api.configs;\n        if (event.data.pairName === getPairName(state)) {\n            configs.forEach(config => {\n                if ([].concat(config.collection).includes(event.data.collectionName)) {\n                    fetch(config)\n                        .then(data => dispatch({\n                            type: API_SET_DATA,\n                            config,\n                            data,\n                        }));\n                }\n            });\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}