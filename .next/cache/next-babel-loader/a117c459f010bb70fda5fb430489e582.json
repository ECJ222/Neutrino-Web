{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\n\nconst {\n  waitForTx,\n  broadcast\n} = require('@waves/waves-transactions');\n\nconst _isString = require('lodash/isString');\n\nconst _isInteger = require('lodash/isInteger');\n\nconst _isObject = require('lodash/isObject');\n\nexport default class Keeper {\n  constructor(dal) {\n    this.dal = dal;\n    this.onUpdate = null;\n    this.fee = 0.009;\n    this._isAvailable = null;\n    this._address = null;\n    this._pageStart = _Date$now();\n    this._checkerInterval = null;\n    this._addressChecker = this._addressChecker.bind(this);\n  }\n\n  async start() {\n    if (this._checkerInterval) {\n      clearInterval(this._checkerInterval);\n    }\n\n    this._address = await this.getAddress();\n    this._checkerInterval = setInterval(this._addressChecker, 1000);\n  }\n\n  stop() {\n    this._address = null;\n\n    if (this._checkerInterval) {\n      clearInterval(this._checkerInterval);\n    }\n  }\n\n  async isInstalled() {\n    const keeper = await this.getPlugin();\n    return !!keeper;\n  }\n\n  async getAccount() {\n    const keeper = await this.getPlugin();\n\n    if (!keeper) {\n      return null;\n    }\n\n    try {\n      const userData = await keeper.publicState();\n      return userData.account;\n    } catch {\n      return null;\n    }\n  }\n\n  async getAddress() {\n    const account = await this.getAccount();\n\n    if (!account) {\n      return null;\n    }\n\n    return account.address;\n  }\n  /**\n   * Get WavesKeeper from window\n   * @returns {Promise}\n   */\n\n\n  async getPlugin() {\n    const checker = resolve => {\n      if (this._isAvailable === true || _Date$now() - this._pageStart > 2000 && window.WavesKeeper && window.WavesKeeper.publicState) {\n        this._isAvailable = true;\n        setTimeout(() => resolve(window.WavesKeeper));\n      } else if (this._isAvailable === false || _Date$now() - this._pageStart > 5000) {\n        this._isAvailable = false;\n        resolve(null);\n      } else if (this._isAvailable === null) {\n        setTimeout(() => checker(resolve), 100);\n      }\n    };\n\n    return new _Promise(checker);\n  }\n  /**\n   *\n   * @param {string} pairName\n   * @param {string} contractName\n   * @param {string} method\n   * @param {array} args\n   * @param {string} paymentCurrency\n   * @param {number} paymentAmount\n   * @param {boolean} waitTx\n   * @returns {Promise}\n   */\n\n\n  async sendTransaction(pairName, contractName, method, args, paymentCurrency, paymentAmount, waitTx = true) {\n    const keeper = await this.getPlugin();\n    const dApp = this.dal.contracts[pairName][contractName];\n    console.log(this.dal.contracts);\n    const result = await keeper.signAndPublishTransaction(this._buildTransaction(dApp, method, args, paymentCurrency, paymentAmount));\n\n    if (result) {\n      if (!waitTx) {\n        return result;\n      }\n\n      const tx = JSON.parse(result);\n      return waitForTx(tx.id, {\n        apiBase: this.dal.nodeUrl,\n        timeout: 10000\n      }).then(() => result);\n    }\n\n    return result;\n  }\n\n  async signTransaction(pairName, contractName, method, args, paymentCurrency, paymentAmount) {\n    const keeper = await this.getPlugin();\n    const dApp = this.dal.contracts[pairName][contractName];\n    return keeper.signTransaction(this._buildTransaction(dApp, method, args, paymentCurrency, paymentAmount));\n  }\n\n  _buildTransaction(dApp, method, args, paymentCurrency, paymentAmount) {\n    const transaction = {\n      type: 16,\n      data: {\n        fee: {\n          assetId: 'WAVES',\n          tokens: String(this.fee)\n        },\n        dApp,\n        call: {\n          args: args.map(item => ({\n            type: _isInteger(item) ? 'integer' : 'string',\n            value: _isObject(item) ? _JSON$stringify(item) : item\n          })),\n          function: method\n        },\n        payment: !paymentAmount ? [] : [{\n          assetId: paymentCurrency || 'WAVES',\n          tokens: String(paymentAmount)\n        }]\n      }\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('Transaction:', transaction); // eslint-disable-line no-console\n    }\n\n    return transaction;\n  }\n\n  async broadcastAndWait(tx) {\n    if (_isString(tx)) {\n      tx = JSON.parse(tx);\n    }\n\n    await broadcast(tx, this.dal.nodeUrl);\n    await waitForTx(tx.id, {\n      apiBase: this.dal.nodeUrl\n    });\n  }\n\n  async broadcast(tx) {\n    if (_isString(tx)) {\n      tx = JSON.parse(tx);\n    }\n\n    return broadcast(tx, this.dal.nodeUrl);\n  }\n\n  async waitForTx(tx) {\n    if (_isString(tx)) {\n      tx = JSON.parse(tx);\n    }\n\n    return waitForTx(tx.id, {\n      apiBase: this.dal.nodeUrl\n    });\n  }\n\n  async _addressChecker() {\n    // Get next address\n    const address = await this.getAddress();\n\n    if (this._address && address && this._address !== address) {\n      this._address = address;\n\n      if (this.onUpdate) {\n        this.onUpdate(this._address);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/components/dal/Keeper.js"],"names":["waitForTx","broadcast","require","_isString","_isInteger","_isObject","Keeper","constructor","dal","onUpdate","fee","_isAvailable","_address","_pageStart","_checkerInterval","_addressChecker","bind","start","clearInterval","getAddress","setInterval","stop","isInstalled","keeper","getPlugin","getAccount","userData","publicState","account","address","checker","resolve","window","WavesKeeper","setTimeout","sendTransaction","pairName","contractName","method","args","paymentCurrency","paymentAmount","waitTx","dApp","contracts","console","log","result","signAndPublishTransaction","_buildTransaction","tx","JSON","parse","id","apiBase","nodeUrl","timeout","then","signTransaction","transaction","type","data","assetId","tokens","String","call","map","item","value","function","payment","process","env","NODE_ENV","broadcastAndWait"],"mappings":"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","sourcesContent":["const {waitForTx, broadcast} = require('@waves/waves-transactions');\nconst _isString = require('lodash/isString');\nconst _isInteger = require('lodash/isInteger');\nconst _isObject = require('lodash/isObject');\n\nexport default class Keeper {\n\n    constructor(dal) {\n        this.dal = dal;\n        this.onUpdate = null;\n        this.fee = 0.009;\n\n        this._isAvailable = null;\n        this._address = null;\n        this._pageStart = Date.now();\n        this._checkerInterval = null;\n\n        this._addressChecker = this._addressChecker.bind(this);\n    }\n\n    async start() {\n        if (this._checkerInterval) {\n            clearInterval(this._checkerInterval);\n        }\n\n        this._address = await this.getAddress();\n\n        this._checkerInterval = setInterval(this._addressChecker, 1000);\n    }\n\n    stop() {\n        this._address = null;\n\n        if (this._checkerInterval) {\n            clearInterval(this._checkerInterval);\n        }\n    }\n\n    async isInstalled() {\n        const keeper = await this.getPlugin();\n        return !!keeper;\n    }\n\n    async getAccount() {\n        const keeper = await this.getPlugin();\n        if (!keeper) {\n            return null;\n        }\n\n        try {\n            const userData = await keeper.publicState();\n            return userData.account;\n        } catch {\n            return null;\n        }\n    }\n\n    async getAddress() {\n        const account = await this.getAccount();\n\n        if (!account) {\n            return null;\n        }\n\n        return account.address;\n    }\n\n    /**\n     * Get WavesKeeper from window\n     * @returns {Promise}\n     */\n    async getPlugin() {\n        const checker = resolve => {\n            if (this._isAvailable === true || (Date.now() - this._pageStart > 2000 && window.WavesKeeper && window.WavesKeeper.publicState)) {\n                this._isAvailable = true;\n                setTimeout(() => resolve(window.WavesKeeper));\n\n            } else if (this._isAvailable === false || Date.now() - this._pageStart > 5000) {\n                this._isAvailable = false;\n                resolve(null);\n            }\n            else if (this._isAvailable === null) {\n                setTimeout(() => checker(resolve), 100);\n            }\n        };\n        return new Promise(checker);\n    }\n\n    /**\n     *\n     * @param {string} pairName\n     * @param {string} contractName\n     * @param {string} method\n     * @param {array} args\n     * @param {string} paymentCurrency\n     * @param {number} paymentAmount\n     * @param {boolean} waitTx\n     * @returns {Promise}\n     */\n    async sendTransaction(pairName, contractName, method, args, paymentCurrency, paymentAmount, waitTx = true) {\n        const keeper = await this.getPlugin();\n        const dApp = this.dal.contracts[pairName][contractName];\n        console.log(this.dal.contracts)\n        const result = await keeper.signAndPublishTransaction(this._buildTransaction(dApp, method, args, paymentCurrency, paymentAmount));\n        if (result) {\n            if (!waitTx) {\n                return result;\n            }\n\n            const tx = JSON.parse(result);\n            return waitForTx(tx.id, {\n                apiBase: this.dal.nodeUrl,\n                timeout: 10000,\n            }).then(() => result);\n        }\n        return result;\n\n    }\n\n    async signTransaction(pairName, contractName, method, args, paymentCurrency, paymentAmount) {\n        const keeper = await this.getPlugin();\n        const dApp = this.dal.contracts[pairName][contractName];\n        return keeper.signTransaction(this._buildTransaction(dApp, method, args, paymentCurrency, paymentAmount));\n    }\n\n    _buildTransaction(dApp, method, args, paymentCurrency, paymentAmount) {\n        const transaction = {\n            type: 16,\n            data: {\n                fee: {\n                    assetId: 'WAVES',\n                    tokens: String(this.fee),\n                },\n                dApp,\n                call: {\n                    args: args.map(item => ({\n                        type: _isInteger(item) ? 'integer' : 'string',\n                        value: _isObject(item) ? JSON.stringify(item) : item,\n                    })),\n                    function: method\n                },\n                payment: !paymentAmount ? [] : [\n                    {\n                        assetId: paymentCurrency || 'WAVES',\n                        tokens: String(paymentAmount),\n                    }\n                ],\n            },\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            console.log('Transaction:', transaction); // eslint-disable-line no-console\n        }\n        return transaction;\n    }\n\n    async broadcastAndWait(tx) {\n        if (_isString(tx)) {\n            tx = JSON.parse(tx);\n        }\n        await broadcast(tx, this.dal.nodeUrl);\n        await waitForTx(tx.id, { apiBase: this.dal.nodeUrl });\n    }\n    async broadcast(tx) {\n        if (_isString(tx)) {\n            tx = JSON.parse(tx);\n        }\n        return broadcast(tx, this.dal.nodeUrl);\n    }\n\n    async waitForTx(tx) {\n        if (_isString(tx)) {\n            tx = JSON.parse(tx);\n        }\n        return waitForTx(tx.id, { apiBase: this.dal.nodeUrl });\n    }\n\n    async _addressChecker() {\n        // Get next address\n\n        const address = await this.getAddress();\n\n        if (this._address && address && this._address !== address) {\n            this._address = address;\n\n            if (this.onUpdate) {\n                this.onUpdate(this._address);\n            }\n        }\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}