{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport _isEqual from 'lodash-es/isEqual';\nimport { apiAddConfigs, apiRemoveConfigs, getConfigId } from '../../actions/api';\nimport { connect } from 'react-redux';\n\nconst stateMap = state => ({\n  apiData: state.api && state.api.data || null\n});\n\nexport default (configsFunc => WrappedComponent => {\n  var _class, _temp;\n\n  return connect(stateMap)((_temp = _class = class ApiHOC extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        overwritedProps: null\n      };\n      this._onUpdate = this._onUpdate.bind(this);\n    }\n\n    componentDidMount() {\n      this.props.dispatch(apiAddConfigs(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps))));\n    }\n\n    componentWillUnmount() {\n      this.props.dispatch(apiRemoveConfigs(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps))));\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const prevConfigs = [].concat(configsFunc(_objectSpread({}, prevProps, {}, prevState.overwritedProps)));\n      const nextConfigs = [].concat(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps)));\n\n      for (let i = 0; i < Math.max(prevConfigs.length, nextConfigs.length); i++) {\n        if (!_isEqual(prevConfigs[i], nextConfigs[i])) {\n          this.props.dispatch([apiRemoveConfigs(prevConfigs[i]), apiAddConfigs(nextConfigs[i])]);\n        }\n      }\n    }\n\n    render() {\n      const data = {};\n\n      if (this.props.apiData) {\n        [].concat(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps))).forEach(config => {\n          data[config.key] = this.props.apiData[getConfigId(config)];\n        });\n      }\n\n      return __jsx(WrappedComponent, _extends({}, this.props, this.state.overwritedProps, data, {\n        updateApiConfig: this._onUpdate\n      }));\n    }\n\n    _onUpdate(overwritedProps) {\n      this.setState({\n        overwritedProps\n      });\n    }\n\n  }, _defineProperty(_class, \"WrappedComponent\", WrappedComponent), _temp));\n});","map":null,"metadata":{},"sourceType":"module"}