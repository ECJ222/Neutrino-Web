{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { NOTIFICATIONS_SHOW, NOTIFICATIONS_CLOSING, NOTIFICATIONS_CLOSE } from '../actions/notifications';\nvar initialState = {\n  items: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case NOTIFICATIONS_SHOW:\n      return _objectSpread({}, state, {\n        items: [].concat(state.items).filter(function (item) {\n          return item.level !== action.level || item.message !== action.message;\n        }) // unique\n        .concat([{\n          id: action.id,\n          level: action.level || 'info',\n          message: action.message,\n          isClosing: false\n        }])\n      });\n\n    case NOTIFICATIONS_CLOSING:\n      return _objectSpread({}, state, {\n        items: [].concat(state.items).map(function (item) {\n          if (item.id === action.id) {\n            item.isClosing = true;\n          }\n\n          return item;\n        })\n      });\n\n    case NOTIFICATIONS_CLOSE:\n      return _objectSpread({}, state, {\n        items: state.items.filter(function (item) {\n          return item.id !== action.id;\n        })\n      });\n\n    default:\n      return state;\n  }\n});\nexport var getNotifications = function getNotifications(state) {\n  return state.notifications.items;\n};","map":null,"metadata":{},"sourceType":"module"}