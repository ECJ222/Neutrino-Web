{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport IntlMessageFormat from 'intl-messageformat';\nimport moment from 'moment';\nimport _isObject from 'lodash-es/isObject';\nimport 'moment/locale/it';\nimport 'moment/locale/ru'; // Fix load locale data\n\nwindow.IntlMessageFormat = IntlMessageFormat;\n\nrequire('intl-messageformat/dist/locale-data/ru');\n\ndelete window.IntlMessageFormat;\n/**\n * @example\n *  {__('{count} {count, plural, one{день} few{дня} many{дней}}', {count: 2})}\n */\n\nexport default class LocaleComponent {\n  constructor() {\n    this.language = 'en';\n    this.sourceLanguage = 'ru';\n    this.backendTimeZone = null;\n    this.backendTimeDiff = null; // in microseconds\n\n    this.translations = {}; // Publish to global\n\n    if (process.env.IS_NODE) {\n      global.__ = this.translate.bind(this);\n    } else {\n      window.__ = this.translate.bind(this);\n    }\n  }\n\n  moment(date, format) {\n    if (this.backendTimeZone && date && date.length === 19 && moment(date, 'YYYY-MM-DD HH:mm:ss').isValid()) {\n      date = date + this.backendTimeZone;\n    }\n\n    return moment(date, format).locale(this.language);\n  }\n\n  t(message, params = {}) {\n    return this.translate(message, params);\n  }\n\n  translate(message, params = {}) {\n    // Translate\n    const hasTranslate = !!this.translations[message];\n    message = this.translations[message] || message; // Cut react components\n\n    const components = {};\n\n    _Object$keys(params).map(key => {\n      if (_isObject(params[key])) {\n        components[key] = params[key];\n        params[key] = `!!${key}!!`;\n      }\n    }); // Format message (params, plural, etc..)\n\n\n    const language = hasTranslate ? this.language : this.sourceLanguage;\n    const formatter = new IntlMessageFormat(message, language);\n    message = formatter.format(params); // Paste react components\n\n    message = this._pasteComponents(message, components);\n    return message;\n  }\n\n  _pasteComponents(message, components) {\n    if (_Object$keys(components).length === 0) {\n      return message;\n    } // Index components\n\n\n    const indexedComponents = [];\n\n    _Object$keys(components).map(key => {\n      const index = message.indexOf(`!!${key}!!`);\n\n      if (index !== -1) {\n        indexedComponents.push({\n          index: index,\n          component: components[key]\n        });\n      }\n\n      message = message.replace(`!!${key}!!`, '!!component!!');\n    });\n\n    indexedComponents.sort((a, b) => {\n      if (a.index < b.index) {\n        return -1;\n      } else if (a.index > b.index) {\n        return 1;\n      }\n\n      return 0;\n    }); // Split text to array, paste components\n\n    const result = [];\n    const textParts = message.split('!!component!!');\n\n    for (let i = 0, j = 0; i < textParts.length; i++) {\n      let isComponentAdded = false;\n\n      if (j === 0 && j < indexedComponents.length && indexedComponents[j].index === 0) {\n        result.push(__jsx(\"span\", {\n          key: `element-${j}`\n        }, indexedComponents[j].component));\n        isComponentAdded = true;\n        j++;\n      }\n\n      result.push(__jsx(\"span\", {\n        key: `text-${i}`\n      }, textParts[i]));\n\n      if (!isComponentAdded && j < indexedComponents.length) {\n        result.push(__jsx(\"span\", {\n          key: `element${j}`\n        }, indexedComponents[j].component));\n        j++;\n      }\n    }\n\n    return __jsx(\"span\", null, result);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}