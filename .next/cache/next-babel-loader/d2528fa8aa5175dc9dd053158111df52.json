{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport { FIELDS_BEFORE_FETCH, FIELDS_AFTER_FETCH, FIELDS_SET_META, FIELDS_ADD_SECURITY, FIELDS_REMOVE_SECURITY, normalizeName } from '../actions/fields';\nconst initialState = {\n  props: {},\n  security: {},\n  meta: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case FIELDS_BEFORE_FETCH:\n      return _objectSpread({}, state, {\n        props: _objectSpread({}, state.props, {\n          [action.fieldId]: _objectSpread({\n            props: null\n          }, state[action.fieldId], {\n            model: action.model,\n            attribute: action.attribute,\n            isLoading: true\n          })\n        })\n      });\n\n    case FIELDS_AFTER_FETCH:\n      action.fields.forEach(field => {\n        state.props[field.fieldId] = _objectSpread({}, state[field.fieldId], {\n          isLoading: false,\n          props: _objectSpread({}, _get(state, `${field.fieldId}.props`), {}, field.props)\n        });\n      });\n      return _objectSpread({}, state, {\n        props: _objectSpread({}, state.props)\n      });\n\n    case FIELDS_ADD_SECURITY:\n      return _objectSpread({}, state, {\n        security: _objectSpread({}, state.security, {\n          [action.formId]: action.params\n        })\n      });\n\n    case FIELDS_REMOVE_SECURITY:\n      return _objectSpread({}, state, {\n        security: _objectSpread({}, state.security, {\n          [action.formId]: null\n        })\n      });\n\n    case FIELDS_SET_META:\n      _Object$keys(action.meta).forEach(name => {\n        action.meta[name].className = name;\n      });\n\n      return _objectSpread({}, state, {\n        meta: _objectSpread({}, state.meta, {}, action.meta)\n      });\n  }\n\n  return state;\n});\nexport const getFieldProps = (state, fieldId) => _get(state, ['fields', 'props', fieldId, 'props']);\nexport const isFieldLoading = (state, fieldId) => !!_get(state, ['fields', 'props', fieldId, 'isLoading']);\nexport const isMetaFetched = state => _get(state, ['fields', 'meta']) !== null;\nexport const getEnumLabels = (state, name) => _get(state, ['fields', 'meta', name, 'labels']) || null;\nexport const getSecurity = (state, formId) => _get(state, ['fields', 'security', formId]);\nconst warnings = {};\nexport const getMeta = (state, name) => {\n  name = normalizeName(name);\n  const meta = _get(state, ['fields', 'meta', name]) || null;\n\n  if (!meta && isMetaFetched(state) && !warnings[name]) {\n    warnings[name] = true;\n    console.warn('Steroids: Not found model meta:', name);\n  }\n\n  return meta;\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/reducers/fields.js"],"names":["_get","FIELDS_BEFORE_FETCH","FIELDS_AFTER_FETCH","FIELDS_SET_META","FIELDS_ADD_SECURITY","FIELDS_REMOVE_SECURITY","normalizeName","initialState","props","security","meta","state","action","type","fieldId","model","attribute","isLoading","fields","forEach","field","formId","params","name","className","getFieldProps","isFieldLoading","isMetaFetched","getEnumLabels","getSecurity","warnings","getMeta","console","warn"],"mappings":"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","sourcesContent":["import _get from 'lodash-es/get';\n\nimport {FIELDS_BEFORE_FETCH, FIELDS_AFTER_FETCH, FIELDS_SET_META, FIELDS_ADD_SECURITY, FIELDS_REMOVE_SECURITY, normalizeName} from '../actions/fields';\n\nconst initialState = {\n    props: {},\n    security: {},\n    meta: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FIELDS_BEFORE_FETCH:\n            return {\n                ...state,\n                props: {\n                    ...state.props,\n                    [action.fieldId]: {\n                        props: null,\n                        ...state[action.fieldId],\n                        model: action.model,\n                        attribute: action.attribute,\n                        isLoading: true,\n                    },\n                },\n            };\n\n        case FIELDS_AFTER_FETCH:\n            action.fields.forEach(field => {\n                state.props[field.fieldId] = {\n                    ...state[field.fieldId],\n                    isLoading: false,\n                    props: {\n                        ..._get(state, `${field.fieldId}.props`),\n                        ...field.props,\n                    },\n                };\n            });\n            return {\n                ...state,\n                props: {\n                    ...state.props,\n                },\n            };\n\n        case FIELDS_ADD_SECURITY:\n            return {\n                ...state,\n                security: {\n                    ...state.security,\n                    [action.formId]: action.params,\n                },\n            };\n\n        case FIELDS_REMOVE_SECURITY:\n            return {\n                ...state,\n                security: {\n                    ...state.security,\n                    [action.formId]: null,\n                },\n            };\n\n        case FIELDS_SET_META:\n            Object.keys(action.meta).forEach(name => {\n                action.meta[name].className = name;\n            });\n\n            return {\n                ...state,\n                meta: {\n                    ...state.meta,\n                    ...action.meta,\n                },\n            };\n    }\n\n    return state;\n};\n\nexport const getFieldProps = (state, fieldId) => _get(state, ['fields', 'props', fieldId, 'props']);\nexport const isFieldLoading = (state, fieldId) => !!_get(state, ['fields', 'props', fieldId, 'isLoading']);\nexport const isMetaFetched = state => _get(state, ['fields', 'meta']) !== null;\nexport const getEnumLabels = (state, name) => _get(state, ['fields', 'meta', name, 'labels']) || null;\nexport const getSecurity = (state, formId) => _get(state, ['fields', 'security', formId]);\n\nconst warnings = {};\nexport const getMeta = (state, name) => {\n    name = normalizeName(name);\n\n    const meta = _get(state, ['fields', 'meta', name]) || null;\n    if (!meta && isMetaFetched(state) && !warnings[name]) {\n        warnings[name] = true;\n        console.warn('Steroids: Not found model meta:', name);\n    }\n    return meta;\n};\n"]},"metadata":{},"sourceType":"module"}