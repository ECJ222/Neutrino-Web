{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nconst {\n  waitForTx,\n  broadcast\n} = require('@waves/waves-transactions');\n\nconst _isString = require('lodash/isString');\n\nconst _isInteger = require('lodash/isInteger');\n\nconst _isObject = require('lodash/isObject');\n\nexport default class Keeper {\n  constructor(dal) {\n    _defineProperty(this, \"dal\", void 0);\n\n    _defineProperty(this, \"onUpdate\", void 0);\n\n    _defineProperty(this, \"fee\", void 0);\n\n    _defineProperty(this, \"_isAvailable\", void 0);\n\n    _defineProperty(this, \"_address\", void 0);\n\n    _defineProperty(this, \"_pageStart\", void 0);\n\n    _defineProperty(this, \"_checkerInterval\", void 0);\n\n    this.dal = dal;\n    this.onUpdate = null;\n    this.fee = 0.009;\n    this._isAvailable = null;\n    this._address = null;\n    this._pageStart = _Date$now();\n    this._checkerInterval = null;\n    this._buildTransaction = this._buildTransaction.bind(this);\n    this._addressChecker = this._addressChecker.bind(this);\n  }\n\n  async start() {\n    if (this._checkerInterval) {\n      clearInterval(this._checkerInterval);\n    }\n\n    this._address = await this.getAddress(); // @ts-ignore\n\n    this._checkerInterval = setInterval(this._addressChecker, 1000);\n  }\n\n  stop() {\n    this._address = null;\n\n    if (this._checkerInterval) {\n      clearInterval(this._checkerInterval);\n    }\n  }\n\n  async isInstalled() {\n    const keeper = await this.getPlugin();\n    return !!keeper;\n  }\n\n  async getAccount() {\n    const keeper = await this.getPlugin();\n\n    if (!keeper) {\n      return null;\n    }\n\n    try {\n      const userData = await keeper.publicState();\n      return userData.account;\n    } catch {\n      return null;\n    }\n  }\n\n  async getAddress() {\n    const account = await this.getAccount();\n\n    if (!account) {\n      return null;\n    }\n\n    return account.address;\n  }\n\n  async getPlugin() {\n    const checker = resolve => {\n      if (this._isAvailable === true || _Date$now() - this._pageStart > 2000 && window.WavesKeeper && window.WavesKeeper.publicState) {\n        this._isAvailable = true;\n        setTimeout(() => resolve(window.WavesKeeper));\n      } else if (this._isAvailable === false || _Date$now() - this._pageStart > 5000) {\n        this._isAvailable = false;\n        resolve(null);\n      } else if (this._isAvailable === null) {\n        setTimeout(() => checker(resolve), 100);\n      }\n    };\n\n    return new _Promise(checker);\n  }\n\n  async sendTransaction(pairName, contractName, method, args, paymentCurrency, paymentAmount, waitTx = true) {\n    const keeper = await this.getPlugin();\n    const dApp = this.dal.contracts[pairName][contractName];\n    const result = await keeper.signAndPublishTransaction(this._buildTransaction(dApp, method, args, paymentCurrency, paymentAmount));\n\n    if (result) {\n      if (!waitTx) {\n        return result;\n      }\n\n      const tx = JSON.parse(result);\n      return waitForTx(tx.id, {\n        apiBase: this.dal.nodeUrl,\n        timeout: 10000\n      }).then(() => result);\n    }\n\n    return result;\n  }\n\n  async signTransaction(pairName, contractName, method, args, paymentCurrency, paymentAmount) {\n    const keeper = await this.getPlugin();\n    const dApp = this.dal.contracts[pairName][contractName];\n    return keeper.signTransaction(this._buildTransaction(dApp, method, args, paymentCurrency, paymentAmount));\n  }\n\n  _buildTransaction(dApp, method, args, paymentCurrency, paymentAmount) {\n    const transaction = {\n      type: 16,\n      data: {\n        fee: {\n          assetId: 'WAVES',\n          tokens: String(this.fee)\n        },\n        dApp,\n        call: {\n          args: args.map(item => ({\n            type: _isInteger(item) ? 'integer' : 'string',\n            value: _isObject(item) ? _JSON$stringify(item) : `${item}`\n          })),\n          function: method\n        },\n        payment: !paymentAmount ? [] : [{\n          assetId: paymentCurrency || 'WAVES',\n          tokens: String(paymentAmount)\n        }]\n      }\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('Transaction:', transaction); // eslint-disable-line no-console\n    }\n\n    return transaction;\n  }\n\n  async broadcastAndWait(tx) {\n    if (_isString(tx)) {\n      tx = JSON.parse(tx);\n    }\n\n    await broadcast(tx, this.dal.nodeUrl);\n    await waitForTx(tx.id, {\n      apiBase: this.dal.nodeUrl\n    });\n  }\n\n  async broadcast(tx) {\n    if (_isString(tx)) {\n      tx = JSON.parse(tx);\n    }\n\n    return broadcast(tx, this.dal.nodeUrl);\n  }\n\n  async waitForTx(tx) {\n    if (_isString(tx)) {\n      tx = JSON.parse(tx);\n    }\n\n    return waitForTx(tx.id, {\n      apiBase: this.dal.nodeUrl\n    });\n  }\n\n  async _addressChecker() {\n    // Get next address\n    const address = await this.getAddress();\n\n    if (this._address && address && this._address !== address) {\n      this._address = address;\n\n      if (this.onUpdate) {\n        this.onUpdate(this._address);\n      }\n    }\n  }\n\n  async _buildTransferTransaction() {}\n\n  async transfer(pairName, recipient, amount, assetId, fee) {\n    const tx = {\n      type: 4,\n      data: {\n        amount: {\n          assetId: assetId,\n          tokens: amount\n        },\n        fee: {\n          assetId: 'WAVES',\n          tokens: '0.001'\n        },\n        recipient: recipient\n      }\n    };\n    const keeper = await this.getPlugin();\n    const result = await keeper.signAndPublishTransaction(tx);\n    console.log({\n      result\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}