{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport _values from 'lodash-es/values';\nimport { OPEN_MODAL, CLOSE_MODAL } from '../actions/modal';\nconst initialState = {\n  opened: {}\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case OPEN_MODAL:\n      return {\n        opened: _objectSpread({}, state.opened, {\n          [action.id]: {\n            id: action.id,\n            modal: action.modal,\n            props: _objectSpread({}, _get(state, `opened.${action.id}.props`), {}, action.props)\n          }\n        })\n      };\n\n    case CLOSE_MODAL:\n      if (action.id) {\n        const opened = state.opened;\n        delete opened[action.id];\n        return {\n          opened\n        };\n      } else {\n        return {\n          opened: {}\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const getOpened = state => _values(state.modal.opened);","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/reducers/modal.js"],"names":["_get","_values","OPEN_MODAL","CLOSE_MODAL","initialState","opened","state","action","type","id","modal","props","getOpened"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,kBAAtC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAArB;AAIA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,UAAL;AACI,aAAO;AACHG,QAAAA,MAAM,oBACCC,KAAK,CAACD,MADP;AAEF,WAACE,MAAM,CAACE,EAAR,GAAa;AACTA,YAAAA,EAAE,EAAEF,MAAM,CAACE,EADF;AAETC,YAAAA,KAAK,EAAEH,MAAM,CAACG,KAFL;AAGTC,YAAAA,KAAK,oBACEX,IAAI,CAACM,KAAD,EAAS,UAASC,MAAM,CAACE,EAAG,QAA5B,CADN,MAEEF,MAAM,CAACI,KAFT;AAHI;AAFX;AADH,OAAP;;AAcJ,SAAKR,WAAL;AACI,UAAII,MAAM,CAACE,EAAX,EAAe;AACX,cAAMJ,MAAM,GAAGC,KAAK,CAACD,MAArB;AACA,eAAOA,MAAM,CAACE,MAAM,CAACE,EAAR,CAAb;AACA,eAAO;AACHJ,UAAAA;AADG,SAAP;AAGH,OAND,MAMO;AACH,eAAO;AACHA,UAAAA,MAAM,EAAE;AADL,SAAP;AAGH;;AAEL;AACI,aAAOC,KAAP;AA9BR;AAgCH,CAjCD;AAmCA,OAAO,MAAMM,SAAS,GAAIN,KAAD,IAAWL,OAAO,CAACK,KAAK,CAACI,KAAN,CAAYL,MAAb,CAApC","sourcesContent":["import _get from 'lodash-es/get';\nimport _values from 'lodash-es/values';\n\nimport {OPEN_MODAL, CLOSE_MODAL} from '../actions/modal';\n\nconst initialState = {\n    opened: {},\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case OPEN_MODAL:\n            return {\n                opened: {\n                    ...state.opened,\n                    [action.id]: {\n                        id: action.id,\n                        modal: action.modal,\n                        props: {\n                            ..._get(state, `opened.${action.id}.props`),\n                            ...action.props,\n                        },\n                    }\n                }\n            };\n\n        case CLOSE_MODAL:\n            if (action.id) {\n                const opened = state.opened;\n                delete opened[action.id];\n                return {\n                    opened,\n                };\n            } else {\n                return {\n                    opened: {},\n                };\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport const getOpened = (state) => _values(state.modal.opened);"]},"metadata":{},"sourceType":"module"}