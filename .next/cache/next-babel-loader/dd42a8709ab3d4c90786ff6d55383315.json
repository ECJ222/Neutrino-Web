{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SCREEN_SET_WIDTH, SCREEN_SET_MEDIA } from '../actions/screen';\nexport const SCREE_PHONE = 'phone';\nexport const SCREEN_TABLET = 'tablet';\nexport const SCREEN_DESKTOP = 'desktop';\nconst initialState = {\n  width: 1280,\n  media: {\n    [SCREE_PHONE]: 320,\n    [SCREEN_TABLET]: 768,\n    [SCREEN_DESKTOP]: 1024\n  }\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SCREEN_SET_WIDTH:\n      return _objectSpread({}, state, {\n        width: action.width\n      });\n\n    case SCREEN_SET_MEDIA:\n      return _objectSpread({}, state, {\n        media: _objectSpread({}, state.media, {}, action.media)\n      });\n  }\n\n  return state;\n});\nexport const getDeviceType = state => {\n  if (state.screen.width < state.screen.media[SCREEN_TABLET]) {\n    return SCREE_PHONE;\n  }\n\n  if (state.screen.width < state.screen.media[SCREEN_DESKTOP]) {\n    return SCREEN_TABLET;\n  }\n\n  return SCREEN_DESKTOP;\n};\nexport const isPhone = state => getDeviceType(state) === SCREE_PHONE;\nexport const isTablet = state => getDeviceType(state) === SCREEN_TABLET;\nexport const isDesktop = state => getDeviceType(state) === SCREEN_DESKTOP;","map":null,"metadata":{},"sourceType":"module"}