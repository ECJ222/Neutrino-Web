{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _get from 'lodash-es/get';\nimport _isArray from 'lodash-es/isArray';\nimport { http } from 'components';\nexport const FIELDS_BEFORE_FETCH = 'FIELDS_BEFORE_FETCH';\nexport const FIELDS_AFTER_FETCH = 'FIELDS_AFTER_FETCH';\nexport const FIELDS_SET_META = 'FIELDS_SET_META';\nexport const FIELDS_ADD_SECURITY = 'FIELDS_ADD_SECURITY';\nexport const FIELDS_REMOVE_SECURITY = 'FIELDS_REMOVE_SECURITY';\nlet timer = null;\nlet queue = [];\nexport const normalizeName = name => name.replace(/\\\\/g, '.').replace(/^\\./, '');\nexport const fetch = (fieldId, model, attribute, params = {}) => dispatch => {\n  model = _get(model, 'className', String(model)); // Mark loading\n\n  dispatch({\n    type: FIELDS_BEFORE_FETCH,\n    fieldId,\n    model,\n    attribute\n  }); // Add to queue\n\n  queue.push({\n    fieldId,\n    model,\n    attribute,\n    params\n  }); // Lazy send request\n\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  timer = setTimeout(() => {\n    // Send request\n    http.post('/api/steroids/fields-fetch', {\n      fields: queue\n    }).then(fields => dispatch({\n      type: FIELDS_AFTER_FETCH,\n      fields\n    })); // Clean queue\n\n    queue = [];\n  }, 10);\n};\nexport const fetchMeta = (names, force = false) => (dispatch, getState) => {\n  if (_isArray(names)) {\n    throw new Error('This format is deprecated, use {models: ..., enums: ...} format.');\n  } // Normalize names\n\n\n  _Object$keys(names).forEach(key => {\n    names[key] = names[key].map(normalizeName);\n  });\n\n  const isMetaFetched = getState().fields.meta !== null;\n\n  if (isMetaFetched && !force) {\n    return;\n  } // Send request\n\n\n  return http.post('/api/steroids/meta-fetch', names).then(meta => setMeta(meta));\n};\nexport const setMeta = meta => ({\n  type: FIELDS_SET_META,\n  meta\n});\nexport const addSecurity = (formId, params) => ({\n  type: FIELDS_ADD_SECURITY,\n  formId,\n  params\n});\nexport const removeSecurity = formId => ({\n  type: FIELDS_REMOVE_SECURITY,\n  formId\n});","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/actions/fields.js"],"names":["_get","_isArray","http","FIELDS_BEFORE_FETCH","FIELDS_AFTER_FETCH","FIELDS_SET_META","FIELDS_ADD_SECURITY","FIELDS_REMOVE_SECURITY","timer","queue","normalizeName","name","replace","fetch","fieldId","model","attribute","params","dispatch","String","type","push","clearTimeout","setTimeout","post","fields","then","fetchMeta","names","force","getState","Error","forEach","key","map","isMetaFetched","meta","setMeta","addSecurity","formId","removeSecurity"],"mappings":"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","sourcesContent":["import _get from 'lodash-es/get';\nimport _isArray from 'lodash-es/isArray';\n\nimport {http} from 'components';\n\nexport const FIELDS_BEFORE_FETCH = 'FIELDS_BEFORE_FETCH';\nexport const FIELDS_AFTER_FETCH = 'FIELDS_AFTER_FETCH';\nexport const FIELDS_SET_META = 'FIELDS_SET_META';\nexport const FIELDS_ADD_SECURITY = 'FIELDS_ADD_SECURITY';\nexport const FIELDS_REMOVE_SECURITY = 'FIELDS_REMOVE_SECURITY';\n\nlet timer = null;\nlet queue = [];\n\nexport const normalizeName = name => name.replace(/\\\\/g, '.').replace(/^\\./, '');\n\nexport const fetch = (fieldId, model, attribute, params = {}) => dispatch => {\n    model = _get(model, 'className', String(model));\n\n    // Mark loading\n    dispatch({\n        type: FIELDS_BEFORE_FETCH,\n        fieldId,\n        model,\n        attribute,\n    });\n\n    // Add to queue\n    queue.push({fieldId, model, attribute, params});\n\n    // Lazy send request\n    if (timer) {\n        clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n        // Send request\n        http.post('/api/steroids/fields-fetch', {fields: queue})\n            .then(fields => dispatch({\n                type: FIELDS_AFTER_FETCH,\n                fields,\n            }));\n\n        // Clean queue\n        queue = [];\n    }, 10);\n};\n\nexport const fetchMeta = (names, force = false) => (dispatch, getState) => {\n    if (_isArray(names)) {\n        throw new Error('This format is deprecated, use {models: ..., enums: ...} format.');\n    }\n\n    // Normalize names\n    Object.keys(names).forEach(key => {\n        names[key] = names[key].map(normalizeName);\n    });\n\n    const isMetaFetched = getState().fields.meta !== null;\n    if (isMetaFetched && !force) {\n        return;\n    }\n\n    // Send request\n    return http.post('/api/steroids/meta-fetch', names)\n        .then(meta => setMeta(meta));\n};\n\nexport const setMeta = meta => ({\n    type: FIELDS_SET_META,\n    meta,\n});\n\nexport const addSecurity = (formId, params) => ({\n    type: FIELDS_ADD_SECURITY,\n    formId,\n    params,\n});\n\nexport const removeSecurity = (formId) => ({\n    type: FIELDS_REMOVE_SECURITY,\n    formId,\n});\n"]},"metadata":{},"sourceType":"module"}