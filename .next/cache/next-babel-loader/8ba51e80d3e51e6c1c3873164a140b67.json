{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _isString from 'lodash-es/isString';\n\nvar HtmlComponent =\n/*#__PURE__*/\nfunction () {\n  function HtmlComponent() {\n    _classCallCheck(this, HtmlComponent);\n\n    this.namespace = '';\n  }\n\n  _createClass(HtmlComponent, [{\n    key: \"bem\",\n    value: function bem(blockName) {\n      var _this = this;\n\n      var bem = function () {\n        return this.classNames.apply(this, arguments);\n      }.bind(this);\n\n      bem.block = function (modifiers) {\n        return _this._applyModifiers(blockName, modifiers);\n      };\n\n      bem.element = function (elementName, modifiers) {\n        return _this._applyModifiers(blockName + '__' + elementName, modifiers);\n      };\n\n      return bem;\n    }\n  }, {\n    key: \"classNames\",\n    value: function classNames() {\n      return Array.prototype.slice.call(arguments).filter(function (v) {\n        return v;\n      }).join(' ');\n    }\n  }, {\n    key: \"addClass\",\n    value: function addClass(node, className) {\n      if (node && _isString(node.className)) {\n        var classes = node.className.split(' ');\n\n        if (classes.indexOf(className) === -1) {\n          classes.push(className);\n          node.className = classes.join(' ');\n        }\n      }\n    }\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(node, className) {\n      if (node && _isString(node.className)) {\n        var classes = node.className.split(' ');\n        var index = classes.indexOf(className);\n\n        if (index !== -1) {\n          classes.splice(index, 1);\n          node.className = classes.join(' ');\n        }\n      }\n    }\n  }, {\n    key: \"closest\",\n    value: function closest(element, className) {\n      while ((element = element.parentElement) && !element.classList.contains(className)) {} // eslint-disable-line no-empty\n\n\n      return element;\n    }\n  }, {\n    key: \"_applyModifiers\",\n    value: function _applyModifiers(entity, modifiers) {\n      var _this2 = this;\n\n      var result = [];\n      result.push(entity);\n\n      if (typeof modifiers === 'string') {\n        result.push(entity + (modifiers ? '_' + modifiers : ''));\n      } else if (modifiers) {\n        _Object$keys(modifiers).forEach(function (key) {\n          var value = modifiers[key];\n\n          if (!value) {// Skip\n          } else if (value === true) {\n            result.push(entity + '_' + key);\n          } else {\n            result.push(entity + '_' + key + '_' + value);\n          }\n        });\n      } // Append namespace\n\n\n      result = result.map(function (cl) {\n        return _this2.namespace + cl;\n      });\n      return result.join(' ');\n    }\n  }]);\n\n  return HtmlComponent;\n}();\n\nexport { HtmlComponent as default };\n;","map":null,"metadata":{},"sourceType":"module"}