{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _get from 'lodash-es/get';\nimport _isArray from 'lodash-es/isArray';\nimport { http } from 'components';\nexport var FIELDS_BEFORE_FETCH = 'FIELDS_BEFORE_FETCH';\nexport var FIELDS_AFTER_FETCH = 'FIELDS_AFTER_FETCH';\nexport var FIELDS_SET_META = 'FIELDS_SET_META';\nexport var FIELDS_ADD_SECURITY = 'FIELDS_ADD_SECURITY';\nexport var FIELDS_REMOVE_SECURITY = 'FIELDS_REMOVE_SECURITY';\nvar timer = null;\nvar queue = [];\nexport var normalizeName = function normalizeName(name) {\n  return name.replace(/\\\\/g, '.').replace(/^\\./, '');\n};\nexport var fetch = function fetch(fieldId, model, attribute) {\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return function (dispatch) {\n    model = _get(model, 'className', String(model)); // Mark loading\n\n    dispatch({\n      type: FIELDS_BEFORE_FETCH,\n      fieldId: fieldId,\n      model: model,\n      attribute: attribute\n    }); // Add to queue\n\n    queue.push({\n      fieldId: fieldId,\n      model: model,\n      attribute: attribute,\n      params: params\n    }); // Lazy send request\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(function () {\n      // Send request\n      http.post('/api/steroids/fields-fetch', {\n        fields: queue\n      }).then(function (fields) {\n        return dispatch({\n          type: FIELDS_AFTER_FETCH,\n          fields: fields\n        });\n      }); // Clean queue\n\n      queue = [];\n    }, 10);\n  };\n};\nexport var fetchMeta = function fetchMeta(names) {\n  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (dispatch, getState) {\n    if (_isArray(names)) {\n      throw new Error('This format is deprecated, use {models: ..., enums: ...} format.');\n    } // Normalize names\n\n\n    _Object$keys(names).forEach(function (key) {\n      names[key] = names[key].map(normalizeName);\n    });\n\n    var isMetaFetched = getState().fields.meta !== null;\n\n    if (isMetaFetched && !force) {\n      return;\n    } // Send request\n\n\n    return http.post('/api/steroids/meta-fetch', names).then(function (meta) {\n      return setMeta(meta);\n    });\n  };\n};\nexport var setMeta = function setMeta(meta) {\n  return {\n    type: FIELDS_SET_META,\n    meta: meta\n  };\n};\nexport var addSecurity = function addSecurity(formId, params) {\n  return {\n    type: FIELDS_ADD_SECURITY,\n    formId: formId,\n    params: params\n  };\n};\nexport var removeSecurity = function removeSecurity(formId) {\n  return {\n    type: FIELDS_REMOVE_SECURITY,\n    formId: formId\n  };\n};","map":null,"metadata":{},"sourceType":"module"}