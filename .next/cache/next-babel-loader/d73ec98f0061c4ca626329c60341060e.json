{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport { FIELDS_BEFORE_FETCH, FIELDS_AFTER_FETCH, FIELDS_SET_META, FIELDS_ADD_SECURITY, FIELDS_REMOVE_SECURITY, normalizeName } from '../actions/fields';\nvar initialState = {\n  props: {},\n  security: {},\n  meta: null\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FIELDS_BEFORE_FETCH:\n      return _objectSpread({}, state, {\n        props: _objectSpread({}, state.props, _defineProperty({}, action.fieldId, _objectSpread({\n          props: null\n        }, state[action.fieldId], {\n          model: action.model,\n          attribute: action.attribute,\n          isLoading: true\n        })))\n      });\n\n    case FIELDS_AFTER_FETCH:\n      action.fields.forEach(function (field) {\n        state.props[field.fieldId] = _objectSpread({}, state[field.fieldId], {\n          isLoading: false,\n          props: _objectSpread({}, _get(state, \"\".concat(field.fieldId, \".props\")), {}, field.props)\n        });\n      });\n      return _objectSpread({}, state, {\n        props: _objectSpread({}, state.props)\n      });\n\n    case FIELDS_ADD_SECURITY:\n      return _objectSpread({}, state, {\n        security: _objectSpread({}, state.security, _defineProperty({}, action.formId, action.params))\n      });\n\n    case FIELDS_REMOVE_SECURITY:\n      return _objectSpread({}, state, {\n        security: _objectSpread({}, state.security, _defineProperty({}, action.formId, null))\n      });\n\n    case FIELDS_SET_META:\n      _Object$keys(action.meta).forEach(function (name) {\n        action.meta[name].className = name;\n      });\n\n      return _objectSpread({}, state, {\n        meta: _objectSpread({}, state.meta, {}, action.meta)\n      });\n  }\n\n  return state;\n});\nexport var getFieldProps = function getFieldProps(state, fieldId) {\n  return _get(state, ['fields', 'props', fieldId, 'props']);\n};\nexport var isFieldLoading = function isFieldLoading(state, fieldId) {\n  return !!_get(state, ['fields', 'props', fieldId, 'isLoading']);\n};\nexport var isMetaFetched = function isMetaFetched(state) {\n  return _get(state, ['fields', 'meta']) !== null;\n};\nexport var getEnumLabels = function getEnumLabels(state, name) {\n  return _get(state, ['fields', 'meta', name, 'labels']) || null;\n};\nexport var getSecurity = function getSecurity(state, formId) {\n  return _get(state, ['fields', 'security', formId]);\n};\nvar warnings = {};\nexport var getMeta = function getMeta(state, name) {\n  name = normalizeName(name);\n  var meta = _get(state, ['fields', 'meta', name]) || null;\n\n  if (!meta && isMetaFetched(state) && !warnings[name]) {\n    warnings[name] = true;\n    console.warn('Steroids: Not found model meta:', name);\n  }\n\n  return meta;\n};","map":null,"metadata":{},"sourceType":"module"}