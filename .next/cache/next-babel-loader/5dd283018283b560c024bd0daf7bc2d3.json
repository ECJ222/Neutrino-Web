{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport { push } from 'react-router-redux';\nimport { http } from 'components';\nexport const NAVIGATION_INIT_ROUTES = 'NAVIGATION_INIT_ROUTES';\nexport const NAVIGATION_SET_PARAMS = 'NAVIGATION_SET_PARAMS';\nexport const NAVIGATION_ADD_CONFIGS = 'NAVIGATION_ADD_CONFIGS';\nexport const NAVIGATION_REMOVE_CONFIGS = 'NAVIGATION_REMOVE_CONFIGS';\nexport const NAVIGATION_SET_DATA = 'NAVIGATION_SET_DATA';\n\nconst normalizeConfigs = configs => {\n  if (!configs) {\n    configs = [];\n  }\n\n  if (!_isArray(configs)) {\n    configs = [configs];\n  }\n\n  configs.forEach((config, index) => {\n    if (!config.key || !config.url) {\n      throw new Error('key and url is required');\n    }\n\n    configs[index] = _objectSpread({\n      method: 'get',\n      params: {}\n    }, config);\n  });\n  return configs;\n};\n\nconst fetch = config => http.send(config.method, config.url, config.params).then(result => result.data);\n\nexport const initRoutes = routesTree => ({\n  type: NAVIGATION_INIT_ROUTES,\n  routesTree\n});\nexport const initParams = params => ({\n  type: NAVIGATION_SET_PARAMS,\n  params\n});\nexport const goToPage = (pageId, params) => (dispatch, getState) => {\n  const getNavUrl = require('../reducers/navigation').getNavUrl;\n\n  return dispatch(push(getNavUrl(getState(), pageId, params)));\n};\nexport const getConfigId = config => config.id || _trim(config.url, '/');\nexport const navigationAddConfigs = configs => dispatch => {\n  configs = normalizeConfigs(configs);\n  dispatch({\n    type: NAVIGATION_ADD_CONFIGS,\n    configs\n  });\n  configs.forEach(config => {\n    fetch(config).then(data => dispatch({\n      type: NAVIGATION_SET_DATA,\n      config,\n      data\n    }));\n  });\n};\nexport const navigationRemoveConfigs = configs => {\n  configs = normalizeConfigs(configs);\n  return {\n    type: NAVIGATION_REMOVE_CONFIGS,\n    configs\n  };\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/actions/navigation.js"],"names":["_isArray","_trim","push","http","NAVIGATION_INIT_ROUTES","NAVIGATION_SET_PARAMS","NAVIGATION_ADD_CONFIGS","NAVIGATION_REMOVE_CONFIGS","NAVIGATION_SET_DATA","normalizeConfigs","configs","forEach","config","index","key","url","Error","method","params","fetch","send","then","result","data","initRoutes","routesTree","type","initParams","goToPage","pageId","dispatch","getState","getNavUrl","require","getConfigId","id","navigationAddConfigs","navigationRemoveConfigs"],"mappings":"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","sourcesContent":["import _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport {push} from 'react-router-redux';\n\nimport {http} from 'components';\n\nexport const NAVIGATION_INIT_ROUTES = 'NAVIGATION_INIT_ROUTES';\nexport const NAVIGATION_SET_PARAMS = 'NAVIGATION_SET_PARAMS';\nexport const NAVIGATION_ADD_CONFIGS = 'NAVIGATION_ADD_CONFIGS';\nexport const NAVIGATION_REMOVE_CONFIGS = 'NAVIGATION_REMOVE_CONFIGS';\nexport const NAVIGATION_SET_DATA = 'NAVIGATION_SET_DATA';\n\nconst normalizeConfigs = configs => {\n    if (!configs) {\n        configs = [];\n    }\n    if (!_isArray(configs)) {\n        configs = [configs];\n    }\n\n    configs.forEach((config, index) => {\n        if (!config.key || !config.url) {\n            throw new Error('key and url is required');\n        }\n\n        configs[index] = {\n            method: 'get',\n            params: {},\n            ...config,\n        };\n    });\n\n    return configs;\n};\n\nconst fetch = config => http.send(config.method, config.url, config.params).then(result => result.data);\n\nexport const initRoutes = routesTree => ({\n    type: NAVIGATION_INIT_ROUTES,\n    routesTree,\n});\n\nexport const initParams = params => ({\n    type: NAVIGATION_SET_PARAMS,\n    params,\n});\n\nexport const goToPage = (pageId, params) => (dispatch, getState) => {\n    const getNavUrl = require('../reducers/navigation').getNavUrl;\n    return dispatch(push(getNavUrl(getState(), pageId, params)));\n};\n\nexport const getConfigId = config => config.id || _trim(config.url, '/');\n\nexport const navigationAddConfigs = configs => dispatch => {\n    configs = normalizeConfigs(configs);\n\n    dispatch({\n        type: NAVIGATION_ADD_CONFIGS,\n        configs,\n    });\n\n    configs.forEach(config => {\n        fetch(config)\n            .then(data => dispatch({\n                type: NAVIGATION_SET_DATA,\n                config,\n                data,\n            }));\n    });\n};\n\nexport const navigationRemoveConfigs = configs => {\n    configs = normalizeConfigs(configs);\n\n    return {\n        type: NAVIGATION_REMOVE_CONFIGS,\n        configs,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}