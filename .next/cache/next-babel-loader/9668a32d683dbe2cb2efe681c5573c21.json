{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _isFunction from 'lodash-es/isFunction';\nimport _isObject from 'lodash-es/isObject';\nimport _upperFirst from 'lodash-es/upperFirst';\nimport _merge from 'lodash-es/merge';\nimport { http } from 'components';\nimport { setMeta } from './fields';\nimport { goToPage } from './navigation';\nexport const AUTH_INIT_USER = 'AUTH_INIT_USER';\nexport const AUTH_SET_DATA = 'AUTH_SET_DATA';\nexport const AUTH_ADD_SOCIAL = 'AUTH_ADD_SOCIAL';\nlet lastInitAction = null;\nexport const init = initAction => (dispatch, getState) => {\n  lastInitAction = initAction;\n  return initAction(getState()).then(data => {\n    // Configure components\n    if (_isObject(data.config)) {\n      const components = require('components');\n\n      _Object$keys(data.config).map(name => {\n        if (components[name]) {\n          _Object$keys(data.config[name]).map(key => {\n            const value = data.config[name][key];\n\n            const setter = 'set' + _upperFirst(key);\n\n            if (_isFunction(components[name][setter])) {\n              components[name][setter](value);\n            } else if (_isObject(components[name][key]) && _isObject(value)) {\n              _merge(components[name][key], value);\n            } else {\n              components[name][key] = value;\n            }\n          });\n        }\n      });\n    }\n\n    return dispatch([// User auth\n    setUser(data.user), // Meta models & enums\n    data.meta && setMeta(data.meta), // User auth\n    setData(data)].filter(Boolean));\n  });\n};\nexport const login = (token, redirectPageId = 'root') => dispatch => {\n  http.setAccessToken(token);\n  return dispatch(init(lastInitAction)).then(() => dispatch(goToPage(redirectPageId)));\n};\nexport const addSocial = social => ({\n  type: AUTH_ADD_SOCIAL,\n  social\n});\nexport const setUser = user => ({\n  type: AUTH_INIT_USER,\n  user: user || null\n});\nexport const setData = data => ({\n  type: AUTH_SET_DATA,\n  data\n});\nexport const logout = () => dispatch => {\n  http.setAccessToken(null);\n  return dispatch([setUser(null), goToPage('root')]);\n};","map":null,"metadata":{},"sourceType":"module"}