{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport pathToRegexp from 'path-to-regexp';\nimport { matchPath } from 'react-router';\nimport _get from 'lodash-es/get';\nimport { NAVIGATION_INIT_ROUTES, NAVIGATION_SET_PARAMS, NAVIGATION_ADD_CONFIGS, NAVIGATION_REMOVE_CONFIGS, NAVIGATION_SET_DATA, getConfigId } from '../actions/navigation';\nimport { getCurrentRoute } from './routing';\nvar initialState = {\n  routesTree: null,\n  params: {},\n  configs: [],\n  data: {},\n  counters: {}\n};\n\nvar findRecursive = function findRecursive(items, pageId, pathItems) {\n  var finedItem = null;\n  (items || []).forEach(function (item) {\n    if (item.id === pageId) {\n      finedItem = item;\n    }\n\n    if (!finedItem) {\n      finedItem = findRecursive(item.items, pageId, pathItems);\n\n      if (finedItem && pathItems) {\n        pathItems.push(item);\n      }\n    }\n  });\n  return finedItem;\n};\n\nvar checkActiveRecursive = function checkActiveRecursive(pathname, item) {\n  var match = matchPath(pathname, {\n    exact: !!item.exact,\n    strict: !!item.strict,\n    path: item.path\n  });\n\n  if (!match) {\n    return !!(item.items || []).find(function (sub) {\n      return checkActiveRecursive(pathname, sub);\n    });\n  }\n\n  return true;\n};\n\nvar buildNavItem = function buildNavItem(state, item, params) {\n  var pathname = _get(state, 'routing.location.pathname');\n\n  var url = item.path;\n\n  try {\n    url = pathToRegexp.compile(item.path)(_objectSpread({}, state.navigation.params, {}, params));\n  } catch (e) {// eslint-disable-line no-empty\n  }\n\n  return _objectSpread({}, item, {\n    id: item.id,\n    title: item.title,\n    label: item.label,\n    url: url,\n    icon: item.icon || null,\n    // you can set icon property to route in routes tree\n    isVisible: item.isVisible,\n    isActive: checkActiveRecursive(pathname, item)\n  });\n};\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case NAVIGATION_INIT_ROUTES:\n      return _objectSpread({}, state, {\n        routesTree: action.routesTree\n      });\n\n    case NAVIGATION_SET_PARAMS:\n      return _objectSpread({}, state, {\n        params: _objectSpread({}, state.params, {}, action.params)\n      });\n\n    case NAVIGATION_ADD_CONFIGS:\n      var configs = [].concat(state.configs);\n\n      var counters = _objectSpread({}, state.counters);\n\n      action.configs.forEach(function (config) {\n        var id = getConfigId(config);\n\n        if (counters[id]) {\n          counters[id]++;\n        } else {\n          counters[id] = 1;\n          configs.push(config);\n        }\n      });\n      return _objectSpread({}, state, {\n        configs: configs,\n        counters: counters\n      });\n\n    case NAVIGATION_REMOVE_CONFIGS:\n      var configs2 = [].concat(state.configs);\n\n      var counters2 = _objectSpread({}, state.counters);\n\n      action.configs.forEach(function (config) {\n        var id = getConfigId(config);\n\n        if (counters2[id]) {\n          counters2[id]--;\n\n          if (counters2[id] <= 0) {\n            configs2 = configs2.filter(function (item) {\n              return getConfigId(item) !== id;\n            });\n          }\n        }\n      });\n      return _objectSpread({}, state, {\n        configs: configs2,\n        counters: counters2\n      });\n\n    case NAVIGATION_SET_DATA:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, _defineProperty({}, getConfigId(action.config), action.data))\n      });\n  }\n\n  return state;\n});\nexport var isInitialized = function isInitialized(state) {\n  return !!state.navigation.routesTree;\n};\nexport var getBreadcrumbs = function getBreadcrumbs(state) {\n  var pageId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var items = [];\n  var root = state.navigation.routesTree;\n\n  if (root) {\n    if (root.id !== pageId) {\n      var route = findRecursive(root.items, pageId, items);\n      items.push(root);\n      items.reverse();\n      items.push(route);\n    } else {\n      items.push(root);\n    }\n  }\n\n  return items.filter(function (item) {\n    return item.isVisible !== false;\n  }).map(function (route) {\n    return buildNavItem(state, route, params);\n  });\n};\nexport var getNavItem = function getNavItem(state, pageId) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var route = getRoute(state, pageId);\n  return route ? buildNavItem(state, route, params) : null;\n};\nexport var getNavUrl = function getNavUrl(state, pageId) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var navItem = getNavItem(state, pageId, params);\n  return navItem ? navItem.url : '';\n};\nexport var getRoute = function getRoute(state, pageId) {\n  var root = state.navigation.routesTree;\n\n  if (!root) {\n    return null;\n  }\n\n  return root.id === pageId ? root : findRecursive(root.items, pageId);\n};\nexport var getCurrentItem = function getCurrentItem(state) {\n  var route = getCurrentRoute(state);\n  return route && getRoute(state, route.id) || null;\n};\nexport var getCurrentItemParam = function getCurrentItemParam(state, param) {\n  var item = getCurrentItem(state);\n  return item && item[param] || null;\n};\nexport var getNavItems = function getNavItems(state) {\n  var parentPageId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var route = getRoute(state, parentPageId);\n  return route ? (route.items || []).filter(function (item) {\n    return item.isVisible !== false;\n  }).map(function (item) {\n    return buildNavItem(state, item, params);\n  }) : [];\n};","map":null,"metadata":{},"sourceType":"module"}