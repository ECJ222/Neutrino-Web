{"ast":null,"code":"import _Number$isInteger from \"@babel/runtime-corejs2/core-js/number/is-integer\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _get from 'lodash/get';\nimport _isEqual from 'lodash/isEqual';\nimport { setUser } from 'yii-steroids/actions/auth';\nimport apiHoc from './dal/apiHoc';\nimport { clientStorage } from 'components';\nimport BalanceController from '../contractControllers/BalanceController';\nimport Keeper from './dal/Keeper';\nimport axios from 'axios';\nimport ContractEnum from '../enums/ContractEnum';\nimport UserRole from 'enums/UserRole';\nimport OrderTypeEnum from 'enums/OrderTypeEnum';\nexport var STORAGE_AUTH_KEY = 'isAuth';\n\nvar DalComponent =\n/*#__PURE__*/\nfunction () {\n  function DalComponent() {\n    _classCallCheck(this, DalComponent);\n\n    this.network = null;\n    this.nodeUrl = null;\n    this.assets = null;\n    this.contracts = null;\n    this.hoc = apiHoc;\n    this.balance = new BalanceController({\n      dalRef: this\n    });\n    this.balance.onUpdate = this.login.bind(this);\n    this.keeper = new Keeper(this);\n    this.keeper.onUpdate = this.login.bind(this);\n\n    if (true && process.env.NODE_ENV !== 'production') {\n      window.dal = this;\n    }\n  }\n  /**\n   * Auth current user and return it data\n   * @returns {Promise}\n   */\n\n\n  _createClass(DalComponent, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var account, user, store, storeUser;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.keeper.getAccount();\n\n              case 2:\n                account = _context.sent;\n                _context.next = 5;\n                return this.keeper.start();\n\n              case 5:\n                _context.next = 7;\n                return this.balance.start(account.address);\n\n              case 7:\n                // Keeper user\n                user = account ? {\n                  role: UserRole.REGISTERED,\n                  address: account.address,\n                  network: account.network,\n                  balances: this.balance.getBalances()\n                } : null; // Mark logged\n\n                if (account && !this.isLogged()) {\n                  clientStorage.set(STORAGE_AUTH_KEY, '1');\n                } // Update redux store\n\n\n                store = require('components').store;\n                storeUser = store.getState().auth.user || null;\n\n                if (!_isEqual(storeUser, user)) {\n                  store.dispatch(setUser(user));\n                }\n\n                return _context.abrupt(\"return\", user);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Check is logged flag\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isLogged\",\n    value: function isLogged() {\n      return clientStorage.get(STORAGE_AUTH_KEY) === '1';\n    }\n    /**\n     * Logout user\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                require('components').store.dispatch(setUser(null));\n\n                clientStorage.remove(STORAGE_AUTH_KEY);\n                this.keeper.stop();\n                this.balance.stop();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"swapWavesToNeutrino\",\n    value: function () {\n      var _swapWavesToNeutrino = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(pairName, amount) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'swapWavesToNeutrino', [], 'WAVES', amount);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function swapWavesToNeutrino(_x, _x2) {\n        return _swapWavesToNeutrino.apply(this, arguments);\n      }\n\n      return swapWavesToNeutrino;\n    }()\n  }, {\n    key: \"swapNeutrinoToWaves\",\n    value: function () {\n      var _swapNeutrinoToWaves = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(pairName, paymentCurrency, amount) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'swapNeutrinoToWaves', [], this.assets[paymentCurrency], amount);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function swapNeutrinoToWaves(_x3, _x4, _x5) {\n        return _swapNeutrinoToWaves.apply(this, arguments);\n      }\n\n      return swapNeutrinoToWaves;\n    }()\n  }, {\n    key: \"withdraw\",\n    value: function () {\n      var _withdraw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(pairName, address, index) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'withdraw', [address, index], 'WAVES', 0);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function withdraw(_x6, _x7, _x8) {\n        return _withdraw.apply(this, arguments);\n      }\n\n      return withdraw;\n    }()\n  }, {\n    key: \"setBondOrder\",\n    value: function () {\n      var _setBondOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(pairName, price, paymentCurrency, bondsAmount) {\n        var contractPrice, position;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(price <= 0 || price >= 1)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                price = Math.round(price * 100) / 100;\n                contractPrice = price * 100;\n                _context6.t0 = _get;\n                _context6.next = 7;\n                return axios.get(\"/api/v1/bonds/\".concat(pairName, \"/position\"), {\n                  params: {\n                    price: contractPrice\n                  }\n                });\n\n              case 7:\n                _context6.t1 = _context6.sent;\n                position = (0, _context6.t0)(_context6.t1, 'data.position');\n\n                if (!(price > 0 && bondsAmount > 0 && _Number$isInteger(position))) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 12;\n                return this.keeper.sendTransaction(pairName, ContractEnum.AUCTION, 'addBuyBondOrder', [contractPrice, position], this.assets[paymentCurrency], bondsAmount * price);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setBondOrder(_x9, _x10, _x11, _x12) {\n        return _setBondOrder.apply(this, arguments);\n      }\n\n      return setBondOrder;\n    }()\n  }, {\n    key: \"setLiquidateOrder\",\n    value: function () {\n      var _setLiquidateOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(pairName, paymentCurrency, total) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.LIQUIDATION, 'addLiquidationOrder', [], this.assets[paymentCurrency], total);\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function setLiquidateOrder(_x13, _x14, _x15) {\n        return _setLiquidateOrder.apply(this, arguments);\n      }\n\n      return setLiquidateOrder;\n    }()\n  }, {\n    key: \"cancelOrder\",\n    value: function () {\n      var _cancelOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(pairName, type, hash) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.t0 = type;\n                _context8.next = _context8.t0 === OrderTypeEnum.BUY ? 3 : _context8.t0 === OrderTypeEnum.LIQUIDATE ? 6 : 9;\n                break;\n\n              case 3:\n                _context8.next = 5;\n                return this.keeper.sendTransaction(pairName, ContractEnum.AUCTION, 'cancelOrder', [hash], 'WAVES', 0);\n\n              case 5:\n                return _context8.abrupt(\"break\", 9);\n\n              case 6:\n                _context8.next = 8;\n                return this.keeper.sendTransaction(pairName, ContractEnum.LIQUIDATION, 'cancelOrder', [hash], 'WAVES', 0);\n\n              case 8:\n                return _context8.abrupt(\"break\", 9);\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function cancelOrder(_x16, _x17, _x18) {\n        return _cancelOrder.apply(this, arguments);\n      }\n\n      return cancelOrder;\n    }() //RPD\n\n  }, {\n    key: \"lockNeutrino\",\n    value: function () {\n      var _lockNeutrino = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(pairName, paymentCurrency, amount) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.RPD, 'lockNeutrino', [], this.assets[paymentCurrency], amount);\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function lockNeutrino(_x19, _x20, _x21) {\n        return _lockNeutrino.apply(this, arguments);\n      }\n\n      return lockNeutrino;\n    }()\n  }, {\n    key: \"unlockNeutrino\",\n    value: function () {\n      var _unlockNeutrino = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(pairName, paymentCurrency, amount) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.RPD, 'unlockNeutrino', [amount, this.assets[paymentCurrency]], 'WAVES', 0);\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function unlockNeutrino(_x22, _x23, _x24) {\n        return _unlockNeutrino.apply(this, arguments);\n      }\n\n      return unlockNeutrino;\n    }()\n  }, {\n    key: \"checkWithdraw\",\n    value: function () {\n      var _checkWithdraw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(pairName, index, historyIndex) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.RPD, 'withdraw', [index, historyIndex], 'WAVES', 0);\n\n              case 2:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function checkWithdraw(_x25, _x26, _x27) {\n        return _checkWithdraw.apply(this, arguments);\n      }\n\n      return checkWithdraw;\n    }()\n  }, {\n    key: \"transferFunds\",\n    value: function () {\n      var _transferFunds = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(pairName, paymentCurrency, address, amount) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.keeper.sendTransaction(pairName, ContractEnum.NEUTRINO, 'transfer', [address], this.assets[paymentCurrency], amount);\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function transferFunds(_x28, _x29, _x30, _x31) {\n        return _transferFunds.apply(this, arguments);\n      }\n\n      return transferFunds;\n    }()\n  }]);\n\n  return DalComponent;\n}();\n\nexport { DalComponent as default };","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/components/DalComponent.js"],"names":["_get","_isEqual","setUser","apiHoc","clientStorage","BalanceController","Keeper","axios","ContractEnum","UserRole","OrderTypeEnum","STORAGE_AUTH_KEY","DalComponent","network","nodeUrl","assets","contracts","hoc","balance","dalRef","onUpdate","login","bind","keeper","process","env","NODE_ENV","window","dal","getAccount","account","start","address","user","role","REGISTERED","balances","getBalances","isLogged","set","store","require","storeUser","getState","auth","dispatch","get","remove","stop","pairName","amount","sendTransaction","NEUTRINO","paymentCurrency","index","price","bondsAmount","Math","round","contractPrice","params","position","AUCTION","total","LIQUIDATION","type","hash","BUY","LIQUIDATE","RPD","historyIndex"],"mappings":"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","sourcesContent":["import _get from 'lodash/get';\nimport _isEqual from 'lodash/isEqual';\nimport { setUser } from 'yii-steroids/actions/auth';\nimport apiHoc from './dal/apiHoc';\nimport { clientStorage } from 'components';\n\nimport BalanceController from '../contractControllers/BalanceController';\nimport Keeper from './dal/Keeper';\nimport axios from 'axios';\nimport ContractEnum from '../enums/ContractEnum';\nimport UserRole from 'enums/UserRole';\nimport OrderTypeEnum from 'enums/OrderTypeEnum';\n\nexport const STORAGE_AUTH_KEY = 'isAuth';\n\nexport default class DalComponent {\n    constructor() {\n        this.network = null;\n        this.nodeUrl = null;\n        this.assets = null;\n        this.contracts = null;\n        this.hoc = apiHoc;\n        this.balance = new BalanceController({ dalRef: this });\n        this.balance.onUpdate = this.login.bind(this);\n\n        this.keeper = new Keeper(this);\n        this.keeper.onUpdate = this.login.bind(this);\n\n        if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n            window.dal = this;\n        }\n    }\n\n    /**\n     * Auth current user and return it data\n     * @returns {Promise}\n     */\n    async login() {\n        // Start keeper listener, fetch balances\n        const account = await this.keeper.getAccount();\n        await this.keeper.start();\n        await this.balance.start(account.address);\n\n        // Keeper user\n        const user = account\n            ? {\n                role: UserRole.REGISTERED,\n                address: account.address,\n                network: account.network,\n                balances: this.balance.getBalances()\n            }\n            : null;\n\n        // Mark logged\n        if (account && !this.isLogged()) {\n            clientStorage.set(STORAGE_AUTH_KEY, '1');\n        }\n\n        // Update redux store\n        const store = require('components').store;\n        const storeUser = store.getState().auth.user || null;\n        if (!_isEqual(storeUser, user)) {\n            store.dispatch(setUser(user));\n        }\n\n        return user;\n    }\n\n    /**\n     * Check is logged flag\n     * @returns {boolean}\n     */\n    isLogged() {\n        return clientStorage.get(STORAGE_AUTH_KEY) === '1';\n    }\n\n    /**\n     * Logout user\n     * @returns {Promise<void>}\n     */\n    async logout() {\n        require('components').store.dispatch(setUser(null));\n        clientStorage.remove(STORAGE_AUTH_KEY);\n\n        this.keeper.stop();\n        this.balance.stop();\n    }\n\n    async swapWavesToNeutrino(pairName, amount) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.NEUTRINO,\n            'swapWavesToNeutrino',\n            [],\n            'WAVES',\n            amount\n        );\n    }\n\n    async swapNeutrinoToWaves(pairName, paymentCurrency, amount) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.NEUTRINO,\n            'swapNeutrinoToWaves',\n            [],\n            this.assets[paymentCurrency],\n            amount\n        );\n    }\n\n    async withdraw(pairName, address, index) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.NEUTRINO,\n            'withdraw',\n            [address, index],\n            'WAVES',\n            0\n        );\n    }\n\n    async setBondOrder(pairName, price, paymentCurrency, bondsAmount) {\n        if (price <= 0 || price >= 1) {\n            return;\n        }\n        price = Math.round(price * 100) / 100;\n        const contractPrice = price * 100;\n        let position = _get(\n            await axios.get(`/api/v1/bonds/${pairName}/position`, {\n                params: { price: contractPrice }\n            }),\n            'data.position'\n        );\n\n        if (price > 0 && bondsAmount > 0 && Number.isInteger(position)) {\n            await this.keeper.sendTransaction(\n                pairName,\n                ContractEnum.AUCTION,\n                'addBuyBondOrder',\n                [contractPrice, position],\n                this.assets[paymentCurrency],\n                bondsAmount * price\n            );\n        }\n    }\n    async setLiquidateOrder(pairName, paymentCurrency, total) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.LIQUIDATION,\n            'addLiquidationOrder',\n            [],\n            this.assets[paymentCurrency],\n            total\n        );\n    }\n\n    async cancelOrder(pairName, type, hash) {\n        switch (type) {\n            case OrderTypeEnum.BUY:\n                await this.keeper.sendTransaction(\n                    pairName,\n                    ContractEnum.AUCTION,\n                    'cancelOrder',\n                    [hash],\n                    'WAVES',\n                    0\n                );\n                break;\n\n            case OrderTypeEnum.LIQUIDATE:\n                await this.keeper.sendTransaction(\n                    pairName,\n                    ContractEnum.LIQUIDATION,\n                    'cancelOrder',\n                    [hash],\n                    'WAVES',\n                    0\n                );\n                break;\n        }\n    }\n\n    //RPD\n    async lockNeutrino(pairName, paymentCurrency, amount) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.RPD,\n            'lockNeutrino',\n            [],\n            this.assets[paymentCurrency],\n            amount\n        );\n    }\n\n    async unlockNeutrino(pairName, paymentCurrency, amount) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.RPD,\n            'unlockNeutrino',\n            [amount, this.assets[paymentCurrency]],\n            'WAVES',\n            0\n        );\n    }\n\n    async checkWithdraw(pairName, index, historyIndex) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.RPD,\n            'withdraw',\n            [index, historyIndex],\n            'WAVES',\n            0\n        );\n    }\n\n    async transferFunds(pairName, paymentCurrency, address, amount) {\n        await this.keeper.sendTransaction(\n            pairName,\n            ContractEnum.NEUTRINO,\n            'transfer',\n            [\n                address\n            ],\n            this.assets[paymentCurrency],\n            amount,\n        );\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}