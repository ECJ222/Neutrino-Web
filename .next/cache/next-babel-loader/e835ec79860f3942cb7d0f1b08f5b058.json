{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _isArray from 'lodash-es/isArray';\nimport _trim from 'lodash-es/trim';\nimport { http } from 'components';\nimport { getPairName } from 'reducers/currency';\nexport var API_ADD_CONFIGS = 'API_ADD_CONFIGS';\nexport var API_REMOVE_CONFIGS = 'API_REMOVE_CONFIGS';\nexport var API_SET_DATA = 'API_SET_DATA';\n\nvar normalizeConfigs = function normalizeConfigs(configs) {\n  if (!configs) {\n    configs = [];\n  }\n\n  if (!_isArray(configs)) {\n    configs = [configs];\n  }\n\n  configs.forEach(function (config, index) {\n    if (!config.key || !config.url) {\n      throw new Error('key and url is required');\n    }\n\n    configs[index] = _objectSpread({\n      method: 'get',\n      params: {}\n    }, config);\n  });\n  return configs;\n};\n\nvar fetch = function fetch(config) {\n  return http.send(config.method, config.url, config.params).then(function (result) {\n    return result.data;\n  });\n};\n\nexport var getConfigId = function getConfigId(config) {\n  return config.id || _trim(config.url, '/');\n};\nexport var apiAddConfigs = function apiAddConfigs(configs) {\n  return function (dispatch) {\n    configs = normalizeConfigs(configs);\n    dispatch({\n      type: API_ADD_CONFIGS,\n      configs: configs\n    });\n    configs.forEach(function (config) {\n      fetch(config).then(function (data) {\n        return dispatch({\n          type: API_SET_DATA,\n          config: config,\n          data: data\n        });\n      });\n    });\n  };\n};\nexport var apiRemoveConfigs = function apiRemoveConfigs(configs) {\n  configs = normalizeConfigs(configs);\n  return {\n    type: API_REMOVE_CONFIGS,\n    configs: configs\n  };\n};\nexport var apiWsHandler = function apiWsHandler(event) {\n  return function (dispatch, getState) {\n    if (event.stream === 'collections') {\n      var state = getState();\n      var configs = state.api.configs;\n\n      if (event.data.pairName === getPairName(state)) {\n        configs.forEach(function (config) {\n          if ([].concat(config.collection).includes(event.data.collectionName)) {\n            fetch(config).then(function (data) {\n              return dispatch({\n                type: API_SET_DATA,\n                config: config,\n                data: data\n              });\n            });\n          }\n        });\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}