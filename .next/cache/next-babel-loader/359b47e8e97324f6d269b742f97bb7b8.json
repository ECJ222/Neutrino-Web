{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/usr/local/var/www/neutrino-web/src/components/dal/apiHoc.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport _isEqual from 'lodash-es/isEqual';\nimport { apiAddConfigs, apiRemoveConfigs, getConfigId } from '../../actions/api';\nimport { connect } from 'react-redux';\n\nconst stateMap = state => ({\n  apiData: state.api && state.api.data || null\n});\n\nexport default (configsFunc => WrappedComponent => {\n  var _class, _temp;\n\n  return connect(stateMap)((_temp = _class = class ApiHOC extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        overwritedProps: null\n      };\n      this._onUpdate = this._onUpdate.bind(this);\n    }\n\n    componentDidMount() {\n      this.props.dispatch(apiAddConfigs(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps))));\n    }\n\n    componentWillUnmount() {\n      this.props.dispatch(apiRemoveConfigs(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps))));\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const prevConfigs = [].concat(configsFunc(_objectSpread({}, prevProps, {}, prevState.overwritedProps)));\n      const nextConfigs = [].concat(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps)));\n\n      for (let i = 0; i < Math.max(prevConfigs.length, nextConfigs.length); i++) {\n        if (!_isEqual(prevConfigs[i], nextConfigs[i])) {\n          this.props.dispatch([apiRemoveConfigs(prevConfigs[i]), apiAddConfigs(nextConfigs[i])]);\n        }\n      }\n    }\n\n    render() {\n      const data = {};\n\n      if (this.props.apiData) {\n        [].concat(configsFunc(_objectSpread({}, this.props, {}, this.state.overwritedProps))).forEach(config => {\n          data[config.key] = this.props.apiData[getConfigId(config)];\n        });\n      }\n\n      return __jsx(WrappedComponent, _extends({}, this.props, this.state.overwritedProps, data, {\n        updateApiConfig: this._onUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }));\n    }\n\n    _onUpdate(overwritedProps) {\n      this.setState({\n        overwritedProps\n      });\n    }\n\n  }, _defineProperty(_class, \"WrappedComponent\", WrappedComponent), _temp));\n});","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/src/components/dal/apiHoc.js"],"names":["React","_isEqual","apiAddConfigs","apiRemoveConfigs","getConfigId","connect","stateMap","state","apiData","api","data","configsFunc","WrappedComponent","ApiHOC","Component","constructor","arguments","overwritedProps","_onUpdate","bind","componentDidMount","props","dispatch","componentWillUnmount","componentDidUpdate","prevProps","prevState","prevConfigs","concat","nextConfigs","i","Math","max","length","render","forEach","config","key","setState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _isEqual from 'lodash-es/isEqual';\n\nimport {apiAddConfigs, apiRemoveConfigs, getConfigId} from '../../actions/api';\nimport {connect} from 'react-redux';\n\nconst stateMap = state => ({\n    apiData: state.api && state.api.data || null,\n});\n\nexport default configsFunc => WrappedComponent => connect(stateMap)(\n    class ApiHOC extends React.Component {\n\n        static WrappedComponent = WrappedComponent;\n    \n        constructor() {\n            super(...arguments);\n    \n            this.state = {\n                overwritedProps: null,\n            };\n    \n            this._onUpdate = this._onUpdate.bind(this);\n        }\n    \n        componentDidMount() {\n            this.props.dispatch(apiAddConfigs(configsFunc({...this.props, ...this.state.overwritedProps})));\n        }\n    \n        componentWillUnmount() {\n            this.props.dispatch(apiRemoveConfigs(configsFunc({...this.props, ...this.state.overwritedProps})));\n        }\n    \n        componentDidUpdate(prevProps, prevState) {\n            const prevConfigs = [].concat(configsFunc({...prevProps, ...prevState.overwritedProps}));\n            const nextConfigs = [].concat(configsFunc({...this.props, ...this.state.overwritedProps}));\n            for (let i = 0; i < Math.max(prevConfigs.length, nextConfigs.length); i++) {\n                if (!_isEqual(prevConfigs[i], nextConfigs[i])) {\n                    this.props.dispatch([\n                        apiRemoveConfigs(prevConfigs[i]),\n                        apiAddConfigs(nextConfigs[i]),\n                    ]);\n                }\n            }\n        }\n    \n        render() {\n            const data = {};\n            if (this.props.apiData) {\n                [].concat(configsFunc({...this.props, ...this.state.overwritedProps})).forEach(config => {\n                    data[config.key] = this.props.apiData[getConfigId(config)];\n                });\n            }\n    \n            return (\n                <WrappedComponent\n                    {...this.props}\n                    {...this.state.overwritedProps}\n                    {...data}\n                    updateApiConfig={this._onUpdate}\n                />\n            );\n        }\n    \n        _onUpdate(overwritedProps) {\n            this.setState({overwritedProps});\n        }\n    \n    }\n);"]},"metadata":{},"sourceType":"module"}