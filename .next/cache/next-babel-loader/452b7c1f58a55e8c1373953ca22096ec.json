{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport { http, clientStorage } from 'components';\nexport const LIST_INIT = 'LIST_INIT';\nexport const LIST_BEFORE_FETCH = 'LIST_BEFORE_FETCH';\nexport const LIST_AFTER_FETCH = 'LIST_AFTER_FETCH';\nexport const LIST_ITEM_ADD = 'LIST_ITEM_ADD';\nexport const LIST_ITEM_UPDATE = 'LIST_ITEM_UPDATE';\nexport const LIST_DESTROY = 'LIST_DESTROY';\nexport const LIST_TOGGLE_ITEM = 'LIST_TOGGLE_ITEM';\nexport const LIST_TOGGLE_ALL = 'LIST_TOGGLE_ALL';\nexport const LIST_SET_LAYOUT = 'LIST_SET_LAYOUT';\nconst STORAGE_LAYOUT_KEY_PREFIX = 'listLayout_';\nconst lazyTimers = {};\n\nconst defaultFetchHandler = list => {\n  let url = list.action;\n\n  if (list.scope) {\n    url += (url.indexOf('?') !== -1 ? '&' : '?') + 'scope=' + list.scope.join(',');\n  }\n\n  return http.send(list.actionMethod, url || location.pathname, _objectSpread({}, list.query, {\n    page: list.page,\n    pageSize: list.pageSize,\n    sort: list.sort\n  })).then(response => response.data);\n};\n\nexport const init = (listId, props) => dispatch => dispatch({\n  action: props.action || props.action === '' ? props.action : null,\n  actionMethod: props.actionMethod || 'post',\n  onFetch: props.onFetch,\n  scope: props.scope,\n  page: props.defaultPage,\n  pageSize: props.defaultPageSize,\n  sort: props.defaultSort || null,\n  total: props.total || null,\n  query: props.query || null,\n  items: props.items || null,\n  loadMore: props.loadMore,\n  primaryKey: props.primaryKey,\n  layoutName: clientStorage.get(STORAGE_LAYOUT_KEY_PREFIX + listId) || props.selectedLayoutName || _get(props, 'layoutNames.0.id') || null,\n  listId,\n  type: LIST_INIT\n});\nexport const fetch = (listId, params = {}) => (dispatch, getState) => {\n  const list = _objectSpread({}, _get(getState(), ['list', 'lists', listId]), {}, params);\n\n  if (!list.action && list.action !== '') {\n    return;\n  }\n\n  const onFetch = list.onFetch || defaultFetchHandler;\n  return dispatch([_objectSpread({}, params, {\n    listId,\n    type: LIST_BEFORE_FETCH\n  }), onFetch(list).then(data => {\n    if (!getState().list.lists[listId]) {\n      return [];\n    }\n\n    return _objectSpread({}, data, {\n      listId,\n      type: LIST_AFTER_FETCH\n    });\n  })]);\n};\nexport const lazyFetch = (listId, params) => dispatch => {\n  if (lazyTimers[listId]) {\n    clearTimeout(lazyTimers[listId]);\n  }\n\n  lazyTimers[listId] = setTimeout(() => dispatch(fetch(listId, params)), 200);\n};\nexport const setPage = (listId, page, loadMore) => fetch(listId, {\n  page,\n  loadMore\n});\nexport const setPageSize = (listId, pageSize) => fetch(listId, {\n  page: 1,\n  pageSize\n});\nexport const setSort = (listId, sort) => fetch(listId, {\n  sort\n});\nexport const refresh = listId => fetch(listId);\nexport const add = (listId, item) => ({\n  item,\n  listId,\n  type: LIST_ITEM_ADD\n});\nexport const update = (listId, item, condition) => ({\n  item,\n  condition,\n  listId,\n  type: LIST_ITEM_UPDATE\n});\nexport const destroy = listId => {\n  if (lazyTimers[listId]) {\n    clearTimeout(lazyTimers[listId]);\n  }\n\n  return {\n    listId,\n    type: LIST_DESTROY\n  };\n};\nexport const toggleItem = (listId, itemId) => ({\n  listId,\n  itemId,\n  type: LIST_TOGGLE_ITEM\n});\nexport const toggleAll = listId => ({\n  listId,\n  type: LIST_TOGGLE_ALL\n});\nexport const setLayoutName = (listId, layoutName) => {\n  clientStorage.set(STORAGE_LAYOUT_KEY_PREFIX + listId, layoutName);\n  return {\n    listId,\n    layoutName,\n    type: LIST_SET_LAYOUT\n  };\n};","map":null,"metadata":{},"sourceType":"module"}