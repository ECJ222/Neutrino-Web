{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport pathToRegexp from 'path-to-regexp';\nimport { matchPath } from 'react-router';\nimport _get from 'lodash-es/get';\nimport { NAVIGATION_INIT_ROUTES, NAVIGATION_SET_PARAMS, NAVIGATION_ADD_CONFIGS, NAVIGATION_REMOVE_CONFIGS, NAVIGATION_SET_DATA, getConfigId } from '../actions/navigation';\nimport { getCurrentRoute } from './routing';\nconst initialState = {\n  routesTree: null,\n  params: {},\n  configs: [],\n  data: {},\n  counters: {}\n};\n\nconst findRecursive = (items, pageId, pathItems) => {\n  let finedItem = null;\n  (items || []).forEach(item => {\n    if (item.id === pageId) {\n      finedItem = item;\n    }\n\n    if (!finedItem) {\n      finedItem = findRecursive(item.items, pageId, pathItems);\n\n      if (finedItem && pathItems) {\n        pathItems.push(item);\n      }\n    }\n  });\n  return finedItem;\n};\n\nconst checkActiveRecursive = (pathname, item) => {\n  const match = matchPath(pathname, {\n    exact: !!item.exact,\n    strict: !!item.strict,\n    path: item.path\n  });\n\n  if (!match) {\n    return !!(item.items || []).find(sub => checkActiveRecursive(pathname, sub));\n  }\n\n  return true;\n};\n\nconst buildNavItem = (state, item, params) => {\n  const pathname = _get(state, 'routing.location.pathname');\n\n  let url = item.path;\n\n  try {\n    url = pathToRegexp.compile(item.path)(_objectSpread({}, state.navigation.params, {}, params));\n  } catch (e) {// eslint-disable-line no-empty\n  }\n\n  return _objectSpread({}, item, {\n    id: item.id,\n    title: item.title,\n    label: item.label,\n    url: url,\n    icon: item.icon || null,\n    // you can set icon property to route in routes tree\n    isVisible: item.isVisible,\n    isActive: checkActiveRecursive(pathname, item)\n  });\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case NAVIGATION_INIT_ROUTES:\n      return _objectSpread({}, state, {\n        routesTree: action.routesTree\n      });\n\n    case NAVIGATION_SET_PARAMS:\n      return _objectSpread({}, state, {\n        params: _objectSpread({}, state.params, {}, action.params)\n      });\n\n    case NAVIGATION_ADD_CONFIGS:\n      const configs = [].concat(state.configs);\n\n      const counters = _objectSpread({}, state.counters);\n\n      action.configs.forEach(config => {\n        const id = getConfigId(config);\n\n        if (counters[id]) {\n          counters[id]++;\n        } else {\n          counters[id] = 1;\n          configs.push(config);\n        }\n      });\n      return _objectSpread({}, state, {\n        configs,\n        counters\n      });\n\n    case NAVIGATION_REMOVE_CONFIGS:\n      let configs2 = [].concat(state.configs);\n\n      const counters2 = _objectSpread({}, state.counters);\n\n      action.configs.forEach(config => {\n        const id = getConfigId(config);\n\n        if (counters2[id]) {\n          counters2[id]--;\n\n          if (counters2[id] <= 0) {\n            configs2 = configs2.filter(item => getConfigId(item) !== id);\n          }\n        }\n      });\n      return _objectSpread({}, state, {\n        configs: configs2,\n        counters: counters2\n      });\n\n    case NAVIGATION_SET_DATA:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          [getConfigId(action.config)]: action.data\n        })\n      });\n  }\n\n  return state;\n});\nexport const isInitialized = state => !!state.navigation.routesTree;\nexport const getBreadcrumbs = (state, pageId = null, params = {}) => {\n  const items = [];\n  const root = state.navigation.routesTree;\n\n  if (root) {\n    if (root.id !== pageId) {\n      const route = findRecursive(root.items, pageId, items);\n      items.push(root);\n      items.reverse();\n      items.push(route);\n    } else {\n      items.push(root);\n    }\n  }\n\n  return items.filter(item => item.isVisible !== false).map(route => buildNavItem(state, route, params));\n};\nexport const getNavItem = (state, pageId, params = {}) => {\n  const route = getRoute(state, pageId);\n  return route ? buildNavItem(state, route, params) : null;\n};\nexport const getNavUrl = (state, pageId, params = {}) => {\n  const navItem = getNavItem(state, pageId, params);\n  return navItem ? navItem.url : '';\n};\nexport const getRoute = (state, pageId) => {\n  const root = state.navigation.routesTree;\n\n  if (!root) {\n    return null;\n  }\n\n  return root.id === pageId ? root : findRecursive(root.items, pageId);\n};\nexport const getCurrentItem = state => {\n  const route = getCurrentRoute(state);\n  return route && getRoute(state, route.id) || null;\n};\nexport const getCurrentItemParam = (state, param) => {\n  const item = getCurrentItem(state);\n  return item && item[param] || null;\n};\nexport const getNavItems = (state, parentPageId = null, params = {}) => {\n  const route = getRoute(state, parentPageId);\n  return route ? (route.items || []).filter(item => item.isVisible !== false).map(item => buildNavItem(state, item, params)) : [];\n};","map":{"version":3,"sources":["/usr/local/var/www/neutrino-web/node_modules/yii-steroids/reducers/navigation.js"],"names":["pathToRegexp","matchPath","_get","NAVIGATION_INIT_ROUTES","NAVIGATION_SET_PARAMS","NAVIGATION_ADD_CONFIGS","NAVIGATION_REMOVE_CONFIGS","NAVIGATION_SET_DATA","getConfigId","getCurrentRoute","initialState","routesTree","params","configs","data","counters","findRecursive","items","pageId","pathItems","finedItem","forEach","item","id","push","checkActiveRecursive","pathname","match","exact","strict","path","find","sub","buildNavItem","state","url","compile","navigation","e","title","label","icon","isVisible","isActive","action","type","concat","config","configs2","counters2","filter","isInitialized","getBreadcrumbs","root","route","reverse","map","getNavItem","getRoute","getNavUrl","navItem","getCurrentItem","getCurrentItemParam","param","getNavItems","parentPageId"],"mappings":"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","sourcesContent":["import pathToRegexp from 'path-to-regexp';\nimport {matchPath} from 'react-router';\nimport _get from 'lodash-es/get';\n\nimport {\n    NAVIGATION_INIT_ROUTES,\n    NAVIGATION_SET_PARAMS,\n    NAVIGATION_ADD_CONFIGS,\n    NAVIGATION_REMOVE_CONFIGS,\n    NAVIGATION_SET_DATA,\n    getConfigId\n} from '../actions/navigation';\n\nimport {getCurrentRoute} from './routing';\n\nconst initialState = {\n    routesTree: null,\n    params: {},\n    configs: [],\n    data: {},\n    counters: {},\n};\n\nconst findRecursive = (items, pageId, pathItems) => {\n    let finedItem = null;\n    (items || []).forEach(item => {\n        if (item.id === pageId) {\n            finedItem = item;\n        }\n        if (!finedItem) {\n            finedItem = findRecursive(item.items, pageId, pathItems);\n            if (finedItem && pathItems) {\n                pathItems.push(item);\n            }\n        }\n    });\n    return finedItem;\n};\n\nconst checkActiveRecursive = (pathname, item) => {\n    const match = matchPath(pathname, {\n        exact: !!item.exact,\n        strict: !!item.strict,\n        path: item.path,\n    });\n    if (!match) {\n        return !!(item.items || []).find(sub => checkActiveRecursive(pathname, sub));\n    }\n    return true;\n};\n\nconst buildNavItem = (state, item, params) => {\n    const pathname = _get(state, 'routing.location.pathname');\n    let url = item.path;\n    try {\n        url = pathToRegexp.compile(item.path)({\n            ...state.navigation.params,\n            ...params,\n        });\n    } catch (e) { // eslint-disable-line no-empty\n    }\n\n    return {\n        ...item,\n        id: item.id,\n        title: item.title,\n        label: item.label,\n        url: url,\n        icon: item.icon || null, // you can set icon property to route in routes tree\n        isVisible: item.isVisible,\n        isActive: checkActiveRecursive(pathname, item),\n    };\n};\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case NAVIGATION_INIT_ROUTES:\n            return {\n                ...state,\n                routesTree: action.routesTree,\n            };\n\n        case NAVIGATION_SET_PARAMS:\n            return {\n                ...state,\n                params: {\n                    ...state.params,\n                    ...action.params,\n                },\n            };\n\n        case NAVIGATION_ADD_CONFIGS:\n            const configs = [].concat(state.configs);\n            const counters = {...state.counters};\n            action.configs.forEach(config => {\n                const id = getConfigId(config);\n                if (counters[id]) {\n                    counters[id]++;\n                } else {\n                    counters[id] = 1;\n                    configs.push(config);\n                }\n            });\n\n            return {\n                ...state,\n                configs,\n                counters,\n            };\n\n        case NAVIGATION_REMOVE_CONFIGS:\n            let configs2 = [].concat(state.configs);\n            const counters2 = {...state.counters};\n            action.configs.forEach(config => {\n                const id = getConfigId(config);\n                if (counters2[id]) {\n                    counters2[id]--;\n\n                    if (counters2[id] <= 0) {\n                        configs2 = configs2.filter(item => getConfigId(item) !== id);\n                    }\n                }\n            });\n            return {\n                ...state,\n                configs: configs2,\n                counters: counters2,\n            };\n\n        case NAVIGATION_SET_DATA:\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    [getConfigId(action.config)]: action.data,\n                },\n            };\n    }\n\n    return state;\n};\n\nexport const isInitialized = state => !!state.navigation.routesTree;\n\nexport const getBreadcrumbs = (state, pageId = null, params = {}) => {\n    const items = [];\n    const root = state.navigation.routesTree;\n    if (root) {\n        if (root.id !== pageId) {\n            const route = findRecursive(root.items, pageId, items);\n            items.push(root);\n            items.reverse();\n            items.push(route);\n        } else {\n            items.push(root);\n        }\n    }\n\n    return items.filter(item => item.isVisible !== false).map(route => buildNavItem(state, route, params));\n};\n\nexport const getNavItem = (state, pageId, params = {}) => {\n    const route = getRoute(state, pageId);\n    return route ? buildNavItem(state, route, params) : null;\n};\nexport const getNavUrl = (state, pageId, params = {}) => {\n    const navItem = getNavItem(state, pageId, params);\n    return navItem ? navItem.url : '';\n};\n\nexport const getRoute = (state, pageId) => {\n    const root = state.navigation.routesTree;\n    if (!root) {\n        return null;\n    }\n\n    return root.id === pageId ? root : findRecursive(root.items, pageId);\n};\n\nexport const getCurrentItem = (state) => {\n    const route = getCurrentRoute(state);\n    return route && getRoute(state, route.id) || null;\n};\n\nexport const getCurrentItemParam = (state, param) => {\n    const item = getCurrentItem(state);\n    return item && item[param] || null;\n};\n\nexport const getNavItems = (state, parentPageId = null, params = {}) => {\n    const route = getRoute(state, parentPageId);\n    return route\n        ? (route.items || []).filter(item => item.isVisible !== false).map(item => buildNavItem(state, item, params))\n        : [];\n};\n\n"]},"metadata":{},"sourceType":"module"}