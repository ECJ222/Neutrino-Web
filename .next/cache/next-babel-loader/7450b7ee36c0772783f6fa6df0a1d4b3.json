{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _get from 'lodash-es/get';\nimport _orderBy from 'lodash-es/orderBy';\nimport { CURRENCY_SET_CURRENT, CURRENCY_SET_PRICES } from 'actions/currency';\nimport CurrencyEnum from 'enums/CurrencyEnum';\nconst initialState = {\n  base: CurrencyEnum.getBaseCurrency(CurrencyEnum.USD_N),\n  source: CurrencyEnum.getSourceCurrency(CurrencyEnum.USD_N),\n  quote: CurrencyEnum.USD_N,\n  prices: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case CURRENCY_SET_CURRENT:\n      return _objectSpread({}, state, {\n        base: action.base,\n        quote: action.quote,\n        source: action.source\n      });\n\n    case CURRENCY_SET_PRICES:\n      return _objectSpread({}, state, {\n        prices: action.prices\n      });\n  }\n\n  return state;\n});\nexport const getBaseCurrency = state => _get(state, 'currency.base');\nexport const getQuoteCurrency = state => _get(state, 'currency.quote');\nexport const getSourceCurrency = state => _get(state, 'currency.source');\nexport const getPairName = state => getBaseCurrency(state) + '_' + getQuoteCurrency(state);\nexport const getPrices = state => state.currency.prices;\nexport const getWavesExchanges = (state, currency) => state.currency.prices[currency] || [];\nexport const getLastWavesExchange = (state, currency) => {\n  let prices = getWavesExchanges(state, currency);\n\n  if (prices.length > 0) {\n    prices = _orderBy(prices, 'height', 'desc');\n    return prices[0].price;\n  } else {\n    return 0;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}