{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _isString from 'lodash-es/isString';\nexport default class HtmlComponent {\n  constructor() {\n    this.namespace = '';\n  }\n\n  bem(blockName) {\n    const bem = function () {\n      return this.classNames(...arguments);\n    }.bind(this);\n\n    bem.block = modifiers => {\n      return this._applyModifiers(blockName, modifiers);\n    };\n\n    bem.element = (elementName, modifiers) => {\n      return this._applyModifiers(blockName + '__' + elementName, modifiers);\n    };\n\n    return bem;\n  }\n\n  classNames() {\n    return Array.prototype.slice.call(arguments).filter(v => v).join(' ');\n  }\n\n  addClass(node, className) {\n    if (node && _isString(node.className)) {\n      const classes = node.className.split(' ');\n\n      if (classes.indexOf(className) === -1) {\n        classes.push(className);\n        node.className = classes.join(' ');\n      }\n    }\n  }\n\n  removeClass(node, className) {\n    if (node && _isString(node.className)) {\n      const classes = node.className.split(' ');\n      const index = classes.indexOf(className);\n\n      if (index !== -1) {\n        classes.splice(index, 1);\n        node.className = classes.join(' ');\n      }\n    }\n  }\n\n  closest(element, className) {\n    while ((element = element.parentElement) && !element.classList.contains(className)) {} // eslint-disable-line no-empty\n\n\n    return element;\n  }\n\n  _applyModifiers(entity, modifiers) {\n    let result = [];\n    result.push(entity);\n\n    if (typeof modifiers === 'string') {\n      result.push(entity + (modifiers ? '_' + modifiers : ''));\n    } else if (modifiers) {\n      _Object$keys(modifiers).forEach(key => {\n        const value = modifiers[key];\n\n        if (!value) {// Skip\n        } else if (value === true) {\n          result.push(entity + '_' + key);\n        } else {\n          result.push(entity + '_' + key + '_' + value);\n        }\n      });\n    } // Append namespace\n\n\n    result = result.map(cl => this.namespace + cl);\n    return result.join(' ');\n  }\n\n}\n;","map":null,"metadata":{},"sourceType":"module"}