{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _isFunction from 'lodash-es/isFunction';\nimport _isObject from 'lodash-es/isObject';\nexport default class UiComponent {\n  constructor() {\n    this.fields = {};\n    this.formatters = {};\n    this.security = {};\n    this._components = {};\n  }\n\n  addViews(components) {\n    this._add('views', components);\n  }\n\n  getView(path) {\n    return this._getComponent('views', path);\n  }\n\n  addFields(components) {\n    this._add('fields', components);\n  }\n\n  getField(path) {\n    return this._getComponent('fields', path);\n  }\n\n  getFieldProps(path) {\n    return this._getPropsConfig('fields', path);\n  }\n\n  addFormatters(components) {\n    this._add('formatters', components);\n  }\n\n  getFormatter(path) {\n    return this._getComponent('formatters', path);\n  }\n\n  getFormatterProps(path) {\n    return this._getPropsConfig('formatters', path);\n  }\n\n  addSecurity(components) {\n    this._add('security', components);\n  }\n\n  getSecurity(path) {\n    return this._getComponent('security', path);\n  }\n\n  getSecurityProps(path) {\n    return this._getPropsConfig('security', path);\n  }\n\n  _add(group, items) {\n    // require.context()\n    if (_isFunction(items) && _isFunction(items.keys)) {\n      items.keys().forEach(fileName => {\n        const matches = fileName.match(/^\\.\\/(.*\\/)?[^\\/]+\\/([^\\/]+)\\.js$/);\n        const path = (matches[1] || '').replace(/\\//g, '.') + matches[2];\n        this._components[group] = this._components[group] || {};\n        this._components[group][path] = items(fileName).default;\n      });\n    } else if (_isObject(items)) {\n      // object\n      this._components[group] = _objectSpread({}, this._components[group], {}, items);\n    } else {\n      throw new Error(`Unsupported ${group} format for add component.`);\n    }\n  }\n\n  _getComponent(group, path) {\n    if (!this._components[group] || !this._components[group][path]) {\n      throw new Error(`Not found '${group}' by path '${path}'.`);\n    }\n\n    return this._components[group][path];\n  }\n\n  _getPropsConfig(group, path) {\n    return this[group] && this[group][path] || null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}